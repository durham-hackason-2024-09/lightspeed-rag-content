# Using content creator

# Providing feedback on Red Hat documentation

If you have a suggestion to improve this documentation, or find an error, you can contact technical support at https://access.redhat.com to open a request.

# Introduction to automation content navigator

As a content creator, you can use automation content navigator to develop Ansible playbooks, collections, and roles that are compatible with the Red Hat Ansible Automation Platform. You can use automation content navigator in the following environments, with seamless and predictable results across them all:

* Local development machines
* Automation execution environments

Automation content navigator also produces an artifact file you can use to help you develop your playbooks and troubleshoot problem areas.

## Uses for automation content navigator

Automation content navigator is a command line, content-creator-focused tool with a text-based user interface. You can use automation content navigator to:

* Launch and watch jobs and playbooks.
* Share stored, completed playbook and job run artifacts in JSON format.
* Browse and introspect automation execution environments.
* Browse your file-based inventory.
* Render Ansible module documentation and extract examples you can use in your playbooks.
* View a detailed command output on the user interface.

## Automation content navigator modes

Automation content navigator operates in two modes:

stdout mode:: Accepts most of the existing Ansible commands and extensions at the command line.
text-based user interface mode:: Provides an interactive, text-based interface to the Ansible commands. Use this mode to evaluate content, run playbooks, and troubleshoot playbooks after they run using artifact files.

### stdout mode

Use the -m stdout subcommand with automation content navigator to use the familiar Ansible commands, such as ansible-playbook within automation execution environments or on your local development environment. You can use commands you are familiar with for quick tasks.

Automation content navigator also provides extensive help in this mode:

--help:: Accessible from ansible-navigator command or from any subcommand, such as ansible-navigator config --help.
subcommand help:: Accessible from the subcommand, for example ansible-navigator config --help-config. This help displays the details of all the parameters supported from the related Ansible command.

### Text-based user interface mode

The text-based user interface mode provides enhanced interaction with automation execution environments, collections, playbooks, and inventory. This mode is compatible with integrated development environments (IDE), such as Visual Studio Code.

![Text-based user interface mode]

This mode includes a number of helpful user interface options:

colon commands:: You can access all the automation content navigator commands with a colon, such as :run or :collections
navigating the text-based interface:: The screen shows how to page up or down, scroll, escape to a prior screen or access :help.
output by line number:: You can access any line number in the displayed output by preceding it with a colon, for example :12.
color-coded output:: With colors enabled, automation content navigator displays items, such as deprecated modules, in red.
pagination and scrolling:: You can page up or down, scroll, or escape by using the options displayed at the bottom of each automation content navigator screen.

You cannot switch between modes after automation content navigator is running.

This document uses the text-based user interface mode for most procedures.

## Automation content navigator commands

The automation content navigator commands run familiar Ansible CLI commands in -m stdout mode. You can use all the subcommands and options from the related Ansible CLI command. Use ansible-navigator --help for details.



## Relationship between Ansible and automation content navigator commands

The automation content navigator commands run familiar Ansible CLI commands in -m stdout mode. You can use all the subcommands and options available in the related Ansible CLI command. Use ansible-navigator --help for details.



# Installing automation content navigator on RHEL

As a content creator, you can install automation content navigator on Red Hat Enterprise Linux (RHEL) 8.6 or later.

## Installing automation content navigator on RHEL from an RPM

You can install automation content navigator on Red Hat Enterprise Linux (RHEL) from an RPM.

* You have installed Python 3.10 or later.
* You have installed RHEL 8.6 or later.
* You registered your system with Red Hat Subscription Manager.


[NOTE]
----
Ensure that you only install the navigator matching your current Red Hat Ansible Automation Platform environment.
----

1. Attach the Red Hat Ansible Automation Platform SKU:

```
$ subscription-manager attach --pool=<sku-pool-id>
```

2. Install automation content navigator with the following command:

v.2.5 for RHEL 8 for x86_64

```
$ sudo dnf install --enablerepo=ansible-automation-platform-2.4-for-rhel-8-x86_64-rpms ansible-navigator
```


v.2.5 for RHEL 9 for x86-64

```
$ sudo dnf install --enablerepo=ansible-automation-platform-2.4-for-rhel-9-x86_64-rpms ansible-navigator
```


* Verify your automation content navigator installation:

```
$ ansible-navigator --help
```


The following example demonstrates a successful installation:

![automation content navigator successful installation]

# Reviewing automation execution environments with automation content navigator

As a content developer, you can review your automation execution environment with automation content navigator and display the packages and collections included in the automation execution environments. Automation content navigator runs a playbook to extract and display the results.

## Reviewing automation execution environments from automation content navigator

You can review your automation execution environments with the automation content navigator text-based user interface.

* Automation execution environments

1. Review the automation execution environments included in your automation content navigator configuration.

```
$ ansible-navigator images
```

![List of automation execution environments]
2. Type the number of the automation execution environment you want to delve into for more details.
![Automation execution environment details]

You can review the packages and versions of each installed automation execution environment and the Ansible version any included collections.
3. Optional: pass in the automation execution environment that you want to use. This becomes the primary and is the automation execution environment that automation content navigator uses.

```
$ ansible-navigator images --eei registry.example.com/example-enterprise-ee:latest
```


* Review the automation execution environment output.
![Automation execution environment output]

# Reviewing inventories with automation content navigator

As a content creator, you can review your Ansible inventory with automation content navigator and interactively delve into the groups and hosts.

## Reviewing inventory from automation content navigator

You can review Ansible inventories with the automation content navigator text-based user interface in interactive mode and delve into groups and hosts for more details.

* A valid inventory file or an inventory plugin.

1. Start automation content navigator.

```
$ ansible-navigator
```


Optional: type ansible-navigator inventory -i simple_inventory.yml from the command line to view the inventory.
2. Review the inventory.

```
 :inventory -i simple_inventory.yml

   TITLE            DESCRIPTION
0│Browse groups    Explore each inventory group and group members members
1│Browse hosts     Explore the inventory with a list of all hosts
```

3. Type 0 to brows the groups.

```
  NAME               TAXONOMY                      TYPE
0│general            all                           group
1│nodes              all                           group
2│ungrouped          all                           group
```


The TAXONOMY field details the hierarchy of groups the selected group or node belongs to.
4. Type the number corresponding to the group you want to delve into.

```
  NAME              TAXONOMY                        TYPE
0│node-0            all▸nodes                       host
1│node-1            all▸nodes                       host
2│node-2            all▸nodes                       host
```

5. Type the number corresponding to the host you want to delve into, or type :<number> for numbers greater than 9.

```
[node-1]
0│---
1│ansible_host: node-1.example.com
2│inventory_hostname: node-1
```


* Review the inventory output.

```
  TITLE            DESCRIPTION
0│Browse groups   Explore each inventory group and group members members
1│Browse hosts    Explore the inventory with a list of all hosts
```


* ansible-inventory.
* How to build your inventory.

# Browsing collections with automation content navigator

As a content creator, you can browse your Ansible collections with automation content navigator and interactively delve into each collection developed locally or within Automation execution environments.

## Automation content navigator collections display

Automation content navigator displays information about your collections with the following details for each collection:

SHADOWED:: Indicates that an additional copy of the collection is higher in the search order, and playbooks prefer that collection.
TYPE:: Shows if the collection is contained within an automation execution environment or volume mounted on onto the automation execution environment as a bind_mount.
PATH:: Reflects the collections location within the automation execution environment or local file system based on the collection TYPE field.

![Automation content navigator collections display]

## Browsing collections from automation content navigator

You can browse Ansible collections with the automation content navigator text-based user interface in interactive mode and delve into each collection. automation content navigator shows collections within the current project directory and those available in the automation execution environments

* A locally accessible collection or installed automation execution environments.

1. Start automation content navigator

```
$ ansible-navigator
```

2. Browse the collection. Alternately, you can type ansible-navigator collections to directly browse the collections.

```
$ :collections
```

![A list of Ansible collections shown in the automation content navigator]
3. Type the number of the collection you want to explore.

```
:4
```

![A collection shown in the automation content navigator]
4. Type the number corresponding to the module you want to delve into.

```
ANSIBLE.UTILS.IP_ADDRESS: Test if something in an IP address
 0│---
 1│additional_information: {}
 2│collection_info:
 3│  authors:
 4│  - Ansible Community
 5│  dependencies: {}
 6│  description: Ansible Collection with utilities to ease the management, manipulation,
 7│    and validation of data within a playbook
 8│  documentation: null
 9│  homepage: null
10│  issues: null
11│  license: []
12│  license_file: LICENSE
13│  name: ansible.utils
14│  namespace: ansible
15│  path:/usr/share/ansible/collections/ansible_collections/ansible/utils/
16│  readme: README.md
<... output truncated...>
```

5. Optional: jump to the documentation examples for this module.

```
:{{ examples }}

0│
1│
2│#### Simple examples
3│
4│- name: Check if 10.1.1.1 is a valid IP address
5│  ansible.builtin.set_fact:
6│    data: "{{ '10.1.1.1' is ansible.utils.ip_address }}"
7│
8│# TASK [Check if 10.1.1.1 is a valid IP address] *********************
9│# ok: [localhost] => {
10│#     "ansible_facts": {
11│#         "data": true
12│#     },
13│#     "changed": false
14│# }
15│
```

6. Optional: open the example in your editor to copy it into a playbook.

```
:open
```

![Documentation example shown in the editing tool]

* Browse the collection list.
![Collection list]

* ansible-collection.
* Introduction to Ansible inventories.

## Review documentation from automation content navigator

You can review Ansible documentation for collections and plugins with the automation content navigator text-based user interface in interactive mode. automation content navigator shows collections within the current project directory and those available in the automation execution environments

* A locally accessible collection or installed automation execution environments.

1. Start automation content navigator

```
$ ansible-navigator
```

2. Review the module you are interested in. Alternately, you can type ansible-navigator doc to access the documentation.

```
:doc ansible.utils.ip_address
```


```
ANSIBLE.UTILS.IP_ADDRESS: Test if something in an IP address
 0│---
 1│additional_information: {}
 2│collection_info:
 3│  authors:
 4│  - Ansible Community
 5│  dependencies: {}
 6│  description: Ansible Collection with utilities to ease the management, manipulation,
 7│    and validation of data within a playbook
 8│  documentation: null
 9│  homepage: null
10│  issues: null
11│  license: []
12│  license_file: LICENSE
13│  name: ansible.utils
14│  namespace: ansible
15│  path:/usr/share/ansible/collections/ansible_collections/ansible/utils/
16│  readme: README.md
<... output truncated...>
```

3. Jump to the documentation examples for this module.

```
:{{ examples }}

0│
1│
2│#### Simple examples
3│
4│- name: Check if 10.1.1.1 is a valid IP address
5│  ansible.builtin.set_fact:
6│    data: "{{ '10.1.1.1' is ansible.utils.ip_address }}"
7│
8│# TASK [Check if 10.1.1.1 is a valid IP address] *********************
9│# ok: [localhost] => {
10│#     "ansible_facts": {
11│#         "data": true
12│#     },
13│#     "changed": false
14│# }
15│
```

4. Optional: open the example in your editor to copy it into a playbook.

```
:open
```

![Documentation example in editor]

See Automation content navigator general settings for details on how to set up your editor.

* Collection index
* Using Ansible collections
* Building Ansible inventories

# Running Ansible playbooks with automation content navigator

As a content creator, you can execute your Ansible playbooks with automation content navigator and interactively delve into the results of each play and task to verify or troubleshoot the playbook. You can also execute your Ansible playbooks inside an execution environment and without an execution environment to compare and troubleshoot any problems.

## Executing a playbook from automation content navigator

You can run Ansible playbooks with the automation content navigator text-based user interface to follow the execution of the tasks and delve into the results of each task.

* A playbook.
* A valid inventory file if not using localhost or an inventory plugin.

1. Start automation content navigator

```
$ ansible-navigator
```

2. Run the playbook.

```
$ :run
```

3. Optional: type ansible-navigator run simple-playbook.yml -i inventory.yml to run the playbook.
4. Verify or add the inventory and any other command line parameters.

```
INVENTORY OR PLAYBOOK NOT FOUND, PLEASE CONFIRM THE FOLLOWING
─────────────────────────────────────────────────────────────────────────
   Path to playbook: /home/ansible-navigator_demo/simple_playbook.yml
   Inventory source: /home/ansible-navigator-demo/inventory.yml
  Additional command line parameters: Please provide a value (optional)
──────────────────────────────────────────────────────────────────────────
                                                           Submit Cancel
```

5. Tab to Submit and hit Enter. You should see the tasks executing.
![Executing playbook tasks]
6. Type the number next to a play to step into the play results, or type :<number> for numbers above 9.
![Task list]

Notice failed tasks show up in red if you have colors enabled for automation content navigator.
7. Type the number next to a task to review the task results, or type :<number> for numbers above 9.
![Failed task results]
8. Optional: type :doc bring up the documentation for the module or plugin used in the task to aid in troubleshooting.

```
ANSIBLE.BUILTIN.PACKAGE_FACTS (MODULE)
  0│---
  1│doc:
  2│  author:
  3│  - Matthew Jones (@matburt)
  4│  - Brian Coca (@bcoca)
  5│  - Adam Miller (@maxamillion)
  6│  collection: ansible.builtin
  7│  description:
  8│  - Return information about installed packages as facts.
<... output omitted ...>
 11│  module: package_facts
 12│  notes:
 13│  - Supports C(check_mode).
 14│  options:
 15│    manager:
 16│      choices:
 17│      - auto
 18│      - rpm
 19│      - apt
 20│      - portage
 21│      - pkg
 22│      - pacman

<... output truncated ...>
```


* ansible-playbook
* Ansible playbooks

## Reviewing playbook results with an automation content navigator artifact file

Automation content navigator saves the results of the playbook run in a JSON artifact file. You can use this file to share the playbook results with someone else, save it for security or compliance reasons, or review and troubleshoot later. You only need the artifact file to review the playbook run. You do not need access to the playbook itself or inventory access.

* A automation content navigator artifact JSON file from a playbook run.

* Start automation content navigator with the artifact file.

```
$ ansible-navigator replay simple_playbook_artifact.json
```

1. Review the playbook results that match when the playbook ran.
![Playbook results]

You can now type the number next to the plays and tasks to step into each to review the results, as you would after executing the playbook.

* ansible-playbook
* Ansible playbooks

# Reviewing your Ansible configuration with automation content navigator

As a content creator, you can review your Ansible configuration with automation content navigator and interactively delve into settings.

## Reviewing your Ansible configuration from automation content navigator

You can review your Ansible configuration with the automation content navigator text-based user interface in interactive mode and delve into the settings. Automation content navigator pulls in the results from an accessible Ansible configuration file, or returns the defaults if no configuration file is present.

* You have authenticated to the Red Hat registry if you need to access additional automation execution environments. See Red Hat Container Registry Authentication for details.

1. Start automation content navigator

```
$ ansible-navigator
```


Optional: type ansible-navigator config from the command line to access the Ansible configuration settings.
2. Review the Ansible configuration.

```
 :config
```

![Ansible configuration]

Some values reflect settings from within the automation execution environments needed for the automation execution environments to function. These display as non-default settings you cannot set in your Ansible configuration file.
3. Type the number corresponding to the setting you want to delve into, or type :<number> for numbers greater than 9.

```
ANSIBLE COW ACCEPTLIST (current: ['bud-frogs', 'bunny', 'cheese']) (default:
 0│---
 1│current:
 2│- bud-frogs
 3│- bunny
 4│- cheese
 5│default:
 6│- bud-frogs
 7│- bunny
 8│- cheese
 9│- daemon
```


The output shows the current setting as well as the default. Note the source in this example is env since the setting comes from the automation execution environments.

* Review the configuration output.
![Configuration output]

* ansible-config.
* Introduction to Ansible configuration.

# Automation content navigator configuration settings

As a content creator, you can configure automation content navigator to suit your development environment.

## Creating an automation content navigator settings file

You can alter the default automation content navigator settings through:

* The command line
* Within a settings file
* As an environment variable

Automation content navigator checks for a settings file in the following order and uses the first match:

* ANSIBLE_NAVIGATOR_CONFIG - The settings file path environment variable if set.
* ./ansible-navigator.<ext> - The settings file within the current project directory, with no dot in the file name.
* \~/.ansible-navigator.<ext> - Your home directory, with a dot in the file name.

Consider the following when you create an automation content navigator settings file:

* The settings file can be in JSON or YAML format.
* For settings in JSON format, the extension must be .json.
* For settings in YAML format, the extension must be .yml or .yaml.
* The project and home directories can only contain one settings file each.
* If automation content navigator finds more than one settings file in either directory, it results in an error.

You can copy the example settings file below into one of those paths to start your ansible-navigator settings file.


```yaml
    ---
    ansible-navigator:
    #   ansible:
    #     config: /tmp/ansible.cfg
    #     cmdline: "--forks 15"
    #     inventories:
    #     - /tmp/test_inventory.yml
    #     playbook: /tmp/test_playbook.yml
    #   ansible-runner:
    #     artifact-dir: /tmp/test1
    #     rotate-artifacts-count: 10
    #     timeout: 300
    #   app: run
    #   collection-doc-cache-path: /tmp/cache.db
    #   color:
    #     enable: False
    #     osc4: False
    #   editor:
    #     command: vim_from_setting
    #     console: False
    #   documentation:
    #     plugin:
    #       name: shell
    #       type: become
    #   execution-environment:
    #     container-engine: podman
    #     enabled: False
    #     environment-variables:
    #       pass:
    #         - ONE
    #         - TWO
    #         - THREE
    #       set:
    #         KEY1: VALUE1
    #         KEY2: VALUE2
    #         KEY3: VALUE3
    #     image: test_image:latest
    #     pull-policy: never
    #     volume-mounts:
    #     - src: "/test1"
    #       dest: "/test1"
    #       label: "Z"
    #   help-config: True
    #   help-doc: True
    #   help-inventory: True
    #   help-playbook: False
    #   inventory-columns:
    #     - ansible_network_os
    #     - ansible_network_cli_ssh_type
    #     - ansible_connection
      logging:
    #     append: False
        level: critical
    #     file: /tmp/log.txt
    #   mode: stdout
    #   playbook-artifact:
    #     enable: True
    #     replay: /tmp/test_artifact.json
    #     save-as: /tmp/test_artifact.json
```


## Automation content navigator general settings

The following table describes each general parameter and setting options for automation content navigator.



## Automation content navigator config subcommand settings

The following table describes each parameter and setting options for the automation content navigator config subcommand.



## automation content navigator doc subcommand settings

The following table describes each parameter and setting options for the automation content navigator doc subcommand.



## Automation content navigator inventory subcommand settings

The following table describes each parameter and setting options for the automation content navigator inventory subcommand.



## Automation content navigator replay subcommand settings

The following table describes each parameter and setting options for the automation content navigator replay subcommand.



## Automation content navigator run subcommand settings

The following table describes each parameter and setting options for the automation content navigator run subcommand.



# Troubleshooting Ansible content with automation content navigator

As a content creator, you can troubleshoot your Ansible content (collections, automation execution environments, and playbooks) with automation content navigator and interactively troubleshoot the playbook. You can also compare results inside or outside an automation execution environment and troubleshoot any problems.

## Reviewing playbook results with an automation content navigator artifact file

Automation content navigator saves the results of the playbook run in a JSON artifact file. You can use this file to share the playbook results with someone else, save it for security or compliance reasons, or review and troubleshoot later. You only need the artifact file to review the playbook run. You do not need access to the playbook itself or inventory access.

* A automation content navigator artifact JSON file from a playbook run.

* Start automation content navigator with the artifact file.

```
$ ansible-navigator replay simple_playbook_artifact.json
```

1. Review the playbook results that match when the playbook ran.
![Playbook results]

You can now type the number next to the plays and tasks to step into each to review the results, as you would after executing the playbook.

* ansible-playbook
* Ansible playbooks

## Frequently asked questions about automation content navigator

Use the following automation content navigator FAQ to help you troubleshoot problems in your environment.

Where should the ansible.cfg file go when using an automation execution environment?:: The easiest place to have the ansible.cfg file is in the project directory next to the playbook.
The playbook directory is automatically mounted in the automation execution environment and automation content navigator finds the ansible.cfg file there.
If the ansible.cfg file is in another directory, set the ANSIBLE_CONFIG variable, and specify the directory as a custom volume mount. (See automation content navigator settings for execution-environment-volume-mounts)
Where should the ansible.cfg file go when not using an automation execution environment?:: Ansible looks for the ansible.cfg in the typical locations when not using an automation execution environment. See Ansible configuration settings for details.
Where should Ansible collections be placed when using an automation execution environment?:: The easiest place to have Ansible collections is in the project directory, in a playbook adjacent collections directory (for example, ansible-galaxy collections install ansible.utils -p ./collections).
The playbook directory is automatically mounted in the automation execution environment and automation content navigator finds the collections there. Another option is to build the collections into an automation execution environment using Ansible Builder. This helps content creators author playbooks that are production ready, since automation controller supports playbook adjacent collection directories. If the collections are in another directory, set the ANSIBLE_COLLECTIONS_PATHS variable and configure a custom volume mount for the directory. (See Automation content navigator general settings for execution-environment-volume-mounts).
Where should Ansible collections be placed when not using an automation execution environment?:: When not using an automation execution environment, Ansible looks in the default locations for collections. See the Using Ansible collections guide.
Why does the playbook hang when vars_prompt or pause/prompt is used?:: By default, automation content navigator runs the playbook in the same manner that automation controller runs the playbook. This helps content creators author playbooks that are production ready. If you cannot avoid the use of vars_prompt or pause\prompt, disabling playbook-artifact creation causes automation content navigator to run the playbook in a manner that is compatible with ansible-playbook and allows for user interaction.
Why does automation content navigator change the terminal colors or look terrible?:: Automation content navigator queries the terminal for its OSC4 compatibility. OSC4, 10, 11, 104, 110, 111 indicate the terminal supports color changing and reverting. It is possible that the terminal is misrepresenting its ability.
You can disable OSC4 detection by setting --osc4 false. (See Automation content navigator general settings for how to handle this with an environment variable or in the settings file).
How can I change the colors used by automation content navigator?:: Use --osc4 false to force automation content navigator to use the terminal defined colors. (See Automation content navigator general settings for how to handle this with an environment variable or in the settings file).
What is with all these site-artifact-2021-06-02T16:02:33.911259+00:00.json files in the playbook directory?:: Automation content navigator creates a playbook artifact for every playbook run. These can be helpful for reviewing the outcome of automation after it is complete, sharing and troubleshooting with a colleague, or keeping for compliance or change-control purposes.
The playbook artifact file has the detailed information about every play and task, and the stdout from the playbook run. You can review playbook artifacts with ansible-navigator replay <filename> or :replay <filename> while in an automation content navigator session. You can review all playbook artifacts with both --mode stdout and --mode interactive, depending on the required view.
You can disable playbook artifacts writing and the default file naming convention. (See Automation content navigator general settings for how to handle this with an environment variable or in the settings file).
Why does vi open when I use :open?:: Automation content navigator opens anything showing in the terminal in the default editor. The default is set to either vi +{line_number} {filename} or the current value of the EDITOR environment variable. Related to this is the editor-console setting which indicates if the editor is console or terminal based. Here are examples of alternate settings that might be useful:

```yaml
# emacs
ansible-navigator:
  editor:
    command: emacs -nw +{line_number} {filename}
    console: true
```


```yaml
# vscode
ansible-navigator:
  editor:
    command: code -g {filename}:{line_number}
    console: false
```


```yaml
#pycharm
ansible-navigator:
  editor:
    command: charm --line {line_number} {filename}
    console: false
```

What is the order in which configuration settings are applied?:: The automation content navigator configuration system pulls in settings from various sources and applies them hierarchically in the following order (where the last applied changes are the most prevalent):
1. Default internal values
2. Values from a settings file
3. Values from environment variables
4. Flags and arguments specified on the command line
5. While issuing : commands within the text-based user interface
Something did not work, how can I troubleshoot it?:: Automation content navigator has reasonable logging messages. You can enable debug logging with --log-level debug. If you think you might have found a bug, log an issue and include the details from the log file.