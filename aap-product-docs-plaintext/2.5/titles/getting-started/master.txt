# Getting started with Ansible Automation Platform

Red Hat Ansible Automation Platform is a unified automation solution that automates a variety of IT processes, including provisioning, configuration management, application deployment, orchestration, and security and compliance changes (including patching systems).
Ansible Automation Platform features a platform interface where you can set up centralized authentication, configure access management, and execute automation tasks from a single location.
This guide will help you get started with Ansible Automation Platform by introducing three central concepts: automation execution, automation decisions, and automation content.

# Providing feedback on Red Hat documentation

If you have a suggestion to improve this documentation, or find an error, you can contact technical support at https://access.redhat.com to open a request.

# Key functionality and concepts

With Ansible Automation Platform, you can create, manage, and scale automation for your organization across users, teams, and regions.

See the following functionality and concepts of Ansible Automation Platform for more details.

## Automation execution

The centerpiece of Ansible Automation Platform is its automation execution command and control center, where you can deploy, define, operate, scale and delegate automation across your enterprise.
With this functionality, you can perform a variety of tasks, such as the ability to run playbooks using a simple, straightforward web UI, dashboards, and centralized logging to manage and track job execution from a single location.

In the automation execution environment, you can use automation controller tasks to build job templates, which standardize how automation is deployed, initiated, and delegated, making it more reusable and consistent.

### Inventory files

An inventory file is a single file with a list of hosts and groups that can be acted on using Ansible commands and playbooks.
You can use an inventory file to specify your installation scenario and describe host deployments to Ansible.
You can also use an inventory file to organize managed nodes in centralized files that give Ansible with system information and network locations.

Depending on the inventory plugins, you can use many formats for your inventory files, but the most common formats are INI and YAML.
The location of your inventory file depends on the installation program you use.

For more details on inventory files, see About the installer inventory in the Red Hat Ansible Automation Platform planning guide.

## Automation content

Automation hub is the central location for your Ansible Automation Platform content.
In automation hub you can also find content collections that you can download and integrate into your automation environment.

An Ansible Content Collection is a ready-to-use toolkit for automation and can include multiple types of content, including playbooks, roles, modules, and plugins all in one place.

You can access automation hub in one of two ways:

* On the Red Hat-hosted Hybrid Cloud Console, where you can find Red Hat validated or certified content that you can sync to your platform environment.
* On a self-hosted, on-premise private automation hub, where you can curate content for your automation users and manage access to collections.

Depending on the way you access automation hub, you might have access to different types of content collections.

There are two types of Red Hat Ansible content:

* Ansible Certified Content Collections, which Red Hat builds, supports, and maintains.
Certified collections are included in your subscription to Red Hat Ansible Automation Platform and you can find in automation hub.
* Ansible validated content collections, which are customizable and therefore do not have a support guarantee, but have been tested in the Ansible Automation Platform environment.
Ansible validated collections are available in your private automation hub through the Platform Installer.
When you download Red Hat Ansible Automation Platform with the bundled installer, validated content is pre-populated into the private automation hub by default, but only if you enable private automation hub as part of the inventory.

### Ansible playbooks

Ansible Content Collections often include playbooks.
Playbooks are YAML files that contain specific sets of human-readable instructions, or “plays”, that you send to run on a single target or groups of targets.
Ansible playbooks are repeatable, reusable, configuration management tools designed to deploy complex applications.

You can use playbooks to manage configurations of and deployments to remote machines and sequence multitiered rollouts involving rolling updates.
Use playbooks to delegate actions to other hosts, interacting with monitoring servers and load balancers along the way.

Once written, you can use and re-use playbooks for automation across your enterprise.
For example, if you need to run a task more than once, write a playbook and put it under source control.
Then you can use the playbook to push out new configuration or confirm the configuration of remote systems.

Ansible playbooks can declare configurations, orchestrate steps of any manually ordered process on many machines in a defined order, or start tasks synchronously or asynchronously.

For more information, see Getting started with Ansible Playbooks.

### Ansible roles

Similar to a playbook, use Ansible roles to create reusable automation content that helps teams to work more efficiently and avoid duplicate efforts.
With roles, you can group together a broader range of existing automation content.
This includes playbooks, configuration files, templates, tasks, and handlers to create customized automation content that can be reused and shared with others.

You can also make roles configurable by exposing variables that users can set when calling the role, allowing them to configure their system according to their organization&#8217;s requirements.

For more information, see Bundle content with Ansible roles.

## Automation decisions

Red Hat Ansible Automation Platform includes Event-Driven Ansible, an automation engine that listens to your system&#8217;s event stream and reacts to events that you have specified with targeted automation tasks.
In this way, Event-Driven Ansible manages routine automation tasks and responses, freeing you up to work on more complex tasks.

Managed through Event-Driven Ansible controller, Ansible rulebooks are the framework for automation decisions. Ansible rulebooks are collections of rulesets, which in turn consist of one or more sources, rules, and conditions. Rulebooks tell the system what events to flag and how to respond to them. From the Automation Decisions section of the platform user interface, you can use rulebooks to connect and listen to event sources, and define actions that are triggered in response to certain events.

For more information about rulebook, events, and sources, see Rulebook actions.

## Automation mesh

Automation mesh is an overlay network intended to ease the distribution of automation across a collection of execution nodes using existing connectivity.
Execution nodes are where Ansible Playbooks are actually executed.
A node runs an automation execution environment which, in turn, runs the Ansible Playbook.
Automation mesh creates peer-to-peer connections between these execution nodes, increasing the resiliency of your automation workloads to network latency and connection disruptions.
This also permits more flexible architectures and provides rapid, independent scaling of control and execution capacity.

## Red Hat Ansible Lightspeed

Red Hat Ansible Lightspeed with IBM watsonx Code Assistant is a generative AI service designed by and for Ansible platform engineers and developers.
It accepts natural-language prompts entered by a user and then interacts with IBM watsonx foundation models to produce code recommendations built on Ansible best practices.

Red Hat Ansible Lightspeed with IBM watsonx Code Assistant helps automation teams learn, create, and maintain Red Hat Ansible Automation Platform content more efficiently.

## Ansible developer tools

Ansible development tools are an integrated and supported suite of capabilities that help IT practitioners at any skill level accurately create automation content faster than with manual coding.
This includes building, testing, and deploying modules and playbooks without requiring hard coding skills.

These tools include:

* Ansible Molecule - creates test environments that mimic real ones, allowing you to test playbooks, roles, and collections across many instances, operating systems, virtualization providers, and more.
* Ansible Lint - analyzes your playbooks, roles, and collections—looking at the markup syntax and how you are using the modules.
It goes beyond regular YAML linters by checking Ansible tasks themselves.
* Execution environment builder - removes the risk of dependency issues when creating automation content by installing your collections and all of their dependencies in a containerized image (known as an execution environment).
* Content testing suite - run checks to enforce coding standards and requirements, unit tests against Ansible modules, and integration tests to ensure workflows connect to your source code repositories.
* Automation content navigator - reviews and explores collections, configurations, documentation, images, inventories, and playbooks.
Complete tasks such as watching jobs, sharing playbooks, browsing execution environment and inventories, and extracting reusable examples.
* Ansible content development kit - is a bundled collection of tools that expands Ansible content creation from IT practitioners performing manual tasks to self-enabled automation content developers.

## Ansible Automation Platform installation and configuration

Red Hat Ansible Automation Platform offers flexible installation and configuration options.
Depending on your organization&#8217;s needs, you can install Red Hat Ansible Automation Platform using one of the following methods, based on your environment:

* Traditional virtual machine
* Red Hat Ansible Automation Platform operator on OpenShift Container Platform
* Cloud environments
* Containerized environments

## Dashboard components

After you install Ansible Automation Platform on your system and log in for the first time, familiarize yourself with the platform dashboard.

Quick starts:: You can learn about Ansible automation functions with guided tutorials called quick starts.
In the dashboard, you can access quick starts by selecting a quick start card.
From the panel displayed, click Start and complete the onscreen instructions.
You can also filter quick starts by keyword and status.
Resource status:: Indicates the status of your hosts, projects, and inventories.
The status indicator links to your configured hosts, projects and inventories where you can search, filter, add and change these resources.
Job Activity:: You can view a summary of your current job status.
Filter the job status within a period of time or by job type, or click View all jobs to view a complete list of jobs that are currently available.
Jobs:: You can view recent jobs that have run, or click View all Jobs to view a complete list of jobs that are currently available, or create a new job.
Projects:: You can view recently updated projects or click View all Projects to view a complete list of the projects that are currently available, or create a new project.
Inventories:: You can view recently updated inventories or click View all Inventories to view a complete list of available inventories, or create a new inventory.
Rulebook Activations:: You can view the list of recent rulebook activations and their status, display the complete list of rulebook activations that are currently available, or create a new rulebook activation.
Rule Audit:: You view recently fired rule audits, view rule audit records, and view rule audit data based on corresponding rulebook activation runs.
Decision Environments:: You can view recently updated decision environments, or click View all Decision Environments to view a complete list of available inventories, or create a new decision environment.

## Final setup and usage

After you have installed Ansible Automation Platform 2.5 and have become familiar with the dashboard, use this document to explore further options for setup and daily use.
This guide is structured so that you can select the path that is most appropriate to you and your role within your organization.
You can also use the navigation panel to learn how Ansible empowers users with different roles and objectives to build and customize automation tasks.

Select one of the following paths to continue getting started:

* If you are a systems administrator configuring authentication and setting up teams and organizations, see Getting started as a platform administrator.
* If you are a developer setting up development environments, creating playbooks, rulebooks, roles, or projects, see Getting started as an automation developer.
* If you are an operator using playbooks, publishing custom content, creating projects, and creating and using inventories, see Getting started as an automation operator.

# Getting started as a platform administrator

As a platform administrator, Ansible Automation Platform can help you enable your users and teams to develop and run automation.

This guide walks you through the basic steps to get set up as an administrator for Ansible Automation Platform, including configuring and maintaining the platform for users.

To get started as an administrator, see the following:

* Logging in for the first time
* Configure authentication
* Managing user access with role-based access control

## Logging in for the first time

Log in to the Ansible Automation Platform as an administrator and enter your subscription information.
You can then create user profiles and assign roles.

1. With the login information provided after your installation completed, open a web browser and log in to Red Hat Ansible Automation Platform by navigating to its server URL at: https://<AAP_SERVER_NAME>/
2. Use the credentials specified during the installation process to login:
* The default username is admin.
* The password for admin is the value specified during installation.

After your first login, you are prompted to add your subscription manifest.

1. You can select between uploading a copy of your subscription manifest or entering your login credentials to find the subscription associated with your profile:
1. To upload a subscription manifest, drag the file to the field beneath Red Hat subscription manifest or browse for the file on your local machine.
2. To find your subscription, click the tab labeled Username / password and enter your credentials.
Your subscription appears in the list menu labeled Subscription.
Select your subscription.
2. After you have added your subscription, click Next.
3. On the screen labeled Analytics, check the box if you want to share data with Red Hat and click Next.
4. Check the box indicating that you agree to the End User License Agreement.
5. Review your information and click Finish.


[TIP]
----
After logging in, review the quick starts section for useful guidance.
----

## Configure authentication

After your first login as an administrator you must configure authentication for your users.
Depending on your organization&#8217;s needs and resources, you can either:

* Set up Basic authentication by creating users, teams, and organizations manually.
* Use an external source such as GitHub to configure authentication for your system.

## Managing user access with role-based access control

Role-based access control (RBAC) restricts user access based on their role within an organization.
The roles in RBAC refer to the levels of access that users have to the network.

You can control what users can do with the components of Ansible Automation Platform at a broad or granular level depending on your RBAC policy.
You can select whether the user is a system administrator or normal user and align roles and access permissions with their positions within the organization.

You can define roles with many permissions that can then be assigned to resources, teams, and users.
The permissions that make up a role dictate what the assigned role allows.
Permissions are allocated with only the access needed for a user to perform the tasks appropriate for their role.

## Creating an organization

Ansible Automation Platform automatically creates a default organization. If you have a self-support level license, you have only the default organization available and can not delete it.
You can use the default organization as it is initially set up and edit it later.

1. From the navigation panel, select .
2. Click Create organization.
3. Enter the Name and optionally provide a Description for your organization.

[NOTE]
----
If automation controller is enabled on the platform, continue with Step 4. Otherwise, proceed to Step 7.
----
4. Enter the name of the Instance Groups on which to run this organization.
5. Select the name of the Default execution environment or search for one that exists on which to run this organization.
6. Optional: Enter the Galaxy credentials or search from a list of existing ones.
7. Click Next.
8. You can manage the instance group order by dragging and dropping the instance group up or down in the list.

[NOTE]
----
The execution precedence is determined by the order in which the instance groups are listed.
----
9. Click Next and verify the organization settings.
10. Click Finish.

## Creating a team

You can create new teams, assign an organization to the team, and manage the users and administrators associated with each team.
Users associated with a team inherit the permissions associated with the team and any organization permissions to which the team has membership.
To add a user or administrator to a team, the user must have already been created.

1. From the navigation panel, select .
2. Click Create team.
3. Enter a Name and optionally give a Description for the team.
4. Select an Organization to be associated with this team.

[NOTE]
----
Each team can only be assigned to one organization.
----
5. Click Create team.

The Details page opens, where you can review and edit your team information.

## Creating a user

You can assign two types of users:

Normal user:: Normal users have read and write access limited to the resources (such as inventory, projects, and job templates) for which that user has been granted the appropriate roles and privileges.
System administrator:: A System administrator (also known as a Superuser) has full system administration privileges — with full read and write privileges over the entire installation. A System administrator is typically responsible for managing all aspects of and delegating responsibilities for day-to-day work to various users.
Select the Organization to be assigned for this user.

1. From the navigation panel, select .
2. Click Create user.
3. Enter the details about your new user in the fields on the Create user page.
Fields marked with an asterisk (*) are required.

[NOTE]
----
If you are modifying your own password, log out and log back in again for it to take effect.
----
4. Click Create user.

When the user is successfully created, the User dialog opens.
From here, you can review and change the user&#8217;s Teams, Roles, Tokens and other membership details.

[NOTE]
----
If the user is not newly-created, the details screen displays the last login activity of that user.
----

If you log in as yourself, and view the details of your user profile, you can manage tokens from your user profile by selecting the Tokens tab.

## Configuring GitHub authentication

You can connect GitHub identities to Ansible Automation Platform using OAuth.
To set up GitHub authentication, you need to obtain an OAuth2 key and secret by registering your organization-owned application from GitHub using the Installing your own GitHub App.

The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI.
To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration.
For more information about accessing this, see Displaying authenticator details.

1. From the navigation panel, select .
2. Click Create authentication.
3. Select GitHub from the Authentication type list.
4. Enter a Name for this authentication setting.
5. When the application is registered, GitHub displays the Client ID and Client Secret:
* Copy and paste the GitHub Client ID into the GitHub OAuth2 Key field.
* Copy and paste the GitHub Client Secret into the GitHub OAuth2 Secret field.
6. Optional: Enter any Additional Authenticator Fields that this authenticator can take.
These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
7. To automatically create organizations, users and teams upon successful login, select Create objects.
8. To enable this authentication method upon creation, select Enabled.
9. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
10. Click Next.

# Getting started as an automation developer

As an automation developer, you can use Ansible Automation Platform to implement your organization&#8217;s automation strategy.
Ansible Automation Platform can help you write, test, and share automation content, and download and use Red Hat certified collections.
This guide will walk you through the basic steps to get set up as an automation developer on Ansible Automation Platform.
To get started as an automation developer, learn how to:

* Set up your development environment
* Use playbooks and rulebooks
* Create roles
* Find existing automation content and publish your own custom content
* Use execution environments and decision environments
* Create a project
* Create and run rulebook activations for Event-Driven Ansible

## Create automation content with playbooks

Ansible playbooks are blueprints that tell Ansible Automation Platform what tasks to perform with which devices.
You can use a playbook to define the automation tasks that you want the platform to run.

### Create a playbook

A playbook contains one or more plays.

## Define events with rulebooks

An Ansible rulebook is a collection of rulesets that references one or more sources, rules, and conditions.

Rulebooks are to Event-Driven Ansible what playbooks are to Ansible Automation Platform as a whole.
Like a playbook, a rulebook defines automation tasks for the platform, along with when they should be triggered.

### Rulebook actions

Rulebooks use an "if-this-then-that” logic that tells Event-Driven Ansible what actions to activate when a rule is triggered.

## Bundle content with Ansible roles

A role is like a customized piece of automation content that bundles together relevant bits from automation playbooks to fit your system&#8217;s specific needs. Roles are self-contained and portable, and can include groupings of tasks, variables, configuration templates, handlers, and other supporting files to orchestrate complicated automation flows.

Instead of creating huge playbooks with hundreds of tasks, you can use roles to break the tasks apart into smaller, more discrete units of work.

To learn more about roles, see What is an Ansible Role-and how is it used?.

### Creating a role

You can create roles using the Ansible Galaxy CLI tool, which is included with your Ansible Automation Platform bundle. Access role-specific commands from the roles subcommand:

## Learn about content collections

Ansible content collections are assemblages of automation content.

You can find Ansible Certified Collections in automation hub.

### Browse content

If you are not using the bundle installer, you can use a Red Hat-supplied Ansible Playbook to install validated content. For further information, see Ansible validated content.

You can update validated collections manually by downloading their updated packages in automation hub.

### Downloading content

After collections are finalized, you can import them to a location where they can be distributed to others across your organization.

1. Log in to Red Hat Ansible Automation Platform.
2. From the navigation panel, select Full Experience.
The automation hub UI is displayed.
3. From the navigation panel, select .
The Collections page displays all collections across all repositories.
You can search for a specific collection.
4. Select the collection that you want to export.
The collection details page opens.
5. From the Install tab, select Download tarball.
The .tar file is downloaded to your default browser downloads folder.
You can now import it to the location of your choosing.

## Publishing to a collection

You can configure your projects to be uploaded to the source control manager of your choice.

### Uploading a collection to automation hub

If you want to share a collection that you have created with the rest of the Ansible community, you can upload it to automation hub.

## Build and use an execution environment

Automation execution environments are consistent and shareable container images that serve as Ansible control nodes.
Automation execution environments reduce the challenge of sharing Ansible content that has external dependencies.
If automation content is like a script that a developer has written, an automation execution environment is like a replica of that developer&#8217;s environment, thereby enabling you to reproduce and scale the automation content that the developer has written.

Automation execution environmentss make it easier for you to implement automation in a range of environments.

### Using the base automation execution environment

Your subscription with Ansible Automation Platform gives you access to some base automation execution environments. You can use a base automation execution environment as a starting point for creating a customized automation execution environment.

(ADD CONTENT)

#### Customize the base execution environment image

Ansible Automation Platform includes the following default execution environments:

* Minimal - Includes the latest Ansible-core 2.15 release along with Ansible Runner, but does not include collections or other content
* EE Supported - Minimal, plus all Red Hat-supported collections and dependencies

While these environments cover many automation use cases, you can add additional items to customize these containers for your specific needs. For more information about customizing your execution environment, see Customizing an existing automation execution environment image in the Creating and consuming execution environments guide.

#### About Ansible Builder

You also have the option of creating an entirely new execution environment with Ansible Builder.
Ansible Builder is a command line tool you can use to create an eexecution environment for Ansible.
You must create execution environment with Ansible Builder.

To build your own execution environment, you must:

* Download Ansible Builder
* Create a definition file that defines your execution environment
* Create an execution environment image based on the definition file

For more information about building an execution environment, see [ADD 2.5 LINK]: Creating and consuming execution environments.

### Adding an execution environment to a job template

* An execution environment must have been created using ansible-builder as described in [ADD 2.5 LINK]:Build an execution environment.
When an execution environment has been created, you can use it to run jobs.
Use the automation controller UI to specify the execution environment to use in your job templates.
* Depending on whether an execution environment is made available for global use or tied to an organization, you must have the appropriate level of administrator privileges to use an execution environment in a job.
Execution environments tied to an organization require Organization administrators to be able to run jobs with those execution environment.
* Before running a job or job template that uses an execution environment that has a credential assigned to it, ensure that the credential has a username, host, and password.

(ADD CONTENT)

#### About container registries

If you have many execution environment that you want to maintain, you can store them in a container registry linked to your private automation hub.

For more information, see [ADD 2.5 LINK]:Populating your private automation hub container registry from the Creating and consuming execution environments guide.

## Build and use a decision environment

Event-Driven Ansible includes an ansible.eda collection, which contains sample sources, event filters and rulebooks.
All the collections, ansible rulebooks and their dependencies use a decision environment, which is an image that can be run on either Podman or Kubernetes.

In decision environments, sources, which are typically Python code, are distributed through ansible-collections.
They inject external events into a rulebook for processing.
The rulebook consists of the following:

* The python interpreter
* Java Runtime Environment for Drools rule engine
* ansible-rulebook python package
* ansible.eda collection

You can use the base decision environment and build your own customized Decision Environments with additional collections and collection dependencies.
You can build a decision environment using a Dockerfile or optionally you can deploy your CA certificate into the image.

### Setting up a new decision environment

The following steps describe how to import a decision environment into your Event-Driven Ansible controller Dashboard.

* You are logged in to the Event-Driven Ansible controller Dashboard as a Content Consumer.
* You have set up a credential, if necessary.
For more information, see the [ADD 2.5 LINK][Setting up credentials] section.
* You have pushed a decision environment image to an image repository or you chose to use the image de-supported provided at registry.redhat.io.

1. Log in to the Ansible Automation Platform Dashboard.
2. Navigate to .
3. Click Create decision environment.
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Image:: This is the full image location, including the container registry, image name, and version tag.
Credential:: This field is optional. This is the token needed to use the decision environment image.
5. Select Create decision environment.

Your decision environment is now created and can be managed on the Decision Environments page.

After saving the new decision environment, the decision environment&#8217;s details page is displayed.
From there or the Decision Environments list view, you can edit or delete it.

## Creating an automation execution project

A project is a logical collection of playbooks.
Projects are useful as a way to group your automation content according to the organizing principle of your choice.

You can set up an automation execution project in the platform UI.

Procedure
. From the navigation panel, select .
. On the Projects page, click Create project to launch the Create Project window.

+

1. Enter the appropriate details into the following required fields:
* Name (required)
* Optional: Description
* Organization (required): A project must have at least one organization. Select one organization now to create the project. When the project is created you can add additional organizations.
* Optional: Execution Environment: Enter the name of the execution environment or search from a list of existing ones to run this project.
For more information, see Migrating to automation execution environments in the Red Hat Ansible Automation Platform Upgrade and Migration Guide.
* Source Control Type (required): Select an SCM type associated with this project from the menu.
Options in the following sections become available depending on the type chosen.
For more information, see [ADD 2.5 LINK][Managing playbooks manually] or [ADD 2.5 LINK]][Managing playbooks using source control].
* Optional: Content Signature Validation Credential: Use this field to enable content verification.
Specify the GPG key to use for validating content signature during project synchronization.
If the content has been tampered with, the job will not run.
For more information, see [ADD 2.5 LINK][Project signing and verification].
2. Click Create project.

## Creating an automation decision project

Like automation execution projects, automation decision projects are logical collections of automation decision content.
You can use the project function to organize your automation decision content in a way that makes sense to you.

* You are logged in to the Event-Driven Ansible controller Dashboard as a Content Consumer.
* You have set up a credential, if necessary.
For more information, see the [ADD 2.5 LINK][Setting up credentials] section.
* You have an existing repository containing rulebooks that are integrated with playbooks contained in a repository to be used by automation controller.

1. Log in to the Event-Driven Ansible controller Dashboard.
2. From the navigation panel, select .
3. Insert the following:
Name:: Enter project name.
Description:: This field is optional.
SCM type:: Git is the only SCM type available for use.
SCM URL:: HTTP[S] protocol address of a repository, such as GitHub or GitLab.

[NOTE]
----
You cannot edit the SCM URL after you create the project.
----
Credential:: This field is optional. This is the token needed to use the SCM URL.
4. Select Create project.

Your project is now created and can be managed in the Projects screen.

After saving the new project, the project&#8217;s details page is displayed.
From there or the Projects list view, you can edit or delete it.

## About inventories

An inventory is a file listing the collection of hosts managed by automation controller.
Organizations are assigned to inventories, while permissions to launch playbooks against inventories are controlled at the user or team level.

### Browsing and creating inventories

The Inventories window displays a list of the inventories that are currently available.
You can sort the inventory list by name and searched type, organization, description, owners and modifiers of the inventory, or additional criteria.

1. From the navigational panel, select .
2. Click Create inventory, and select the type of inventory to create.
3. Enter the appropriate details into the following fields:
* Name: Enter a name appropriate for this inventory.
* Optional: Description: Enter an arbitrary description as appropriate.
* Organization: Required. Choose among the available organizations.
* Only applicable to Smart Inventories: Smart Host Filter: Populate the hosts for this inventory by using a search filter.

Example

name__icontains=RedHat.

These options are based on the organization you chose.

Filters are similar to tags in that tags are used to filter certain hosts that contain those names.
Therefore, to populate the Smart Host Filter field, specify a tag that contains the hosts you want, not the hosts themselves.

Filters are case-sensitive.
* Instance Groups: Select the instance group or groups for this inventory to run on.

You can select many instance groups and sort them in the order that you want them run.
* Optional: Labels: Supply labels that describe this inventory, so they can be used to group and filter inventories and jobs.
* Only applicable to constructed inventories: Input inventories: Specify the source inventories to include in this constructed inventory.
Empty groups from input inventories are copied into the constructed inventory.
* Optional:(Only applicable to constructed inventories): Cached timeout (seconds): Set the length of time you want the cache plugin data to timeout.
* Only applicable to constructed inventories: Verbosity: Control the level of output that Ansible produces as the playbook executes related to inventory sources associated with constructed inventories.

Select the verbosity from:
* Normal
* Verbose
* More verbose
* Debug
* Connection Debug
* WinRM Debug
* Verbose logging includes the output of all commands.
* More verbose provides more detail than Verbose.
* Debug logging is exceedingly verbose and includes information about SSH operations that can be useful in certain support instances. Most users do not need to see debug mode output.
* Connection Debug enables you to run ssh in verbose mode, providing debugging information about the SSH connection progress.
* WinRM Debug used for verbosity specific to windows remote management

Click the  icon for information on How to use the constructed inventory plugin.
* Only applicable to constructed inventories: Limit: Restricts the number of returned hosts for the inventory source associated with the constructed inventory.
You can paste a group name into the limit field to only include hosts in that group.
For more information, see the Source vars setting.
* Only applicable to standard inventories: Options: Check the Prevent Instance Group Fallback option to enable only the instance groups listed in the Instance Groups field to execute the job.
If unchecked, all available instances in the execution pool are used based on the hierarchy.
* Variables (Source vars for constructed inventories):
* Variables Variable definitions and values to apply to all hosts in this inventory.
Enter variables by using either JSON or YAML syntax.
Use the radio button to toggle between the two.
* Source vars for constructed inventories creates groups, specifically under the groups key of the data.
It accepts Jinja2 template syntax, renders it for every host, makes a true or false evaluation, and includes the host in the group (from the key of the entry) if the result is true.
This is particularly useful because you can paste that group name into the limit field to only include hosts in that group.
4. Click Create inventory.

After saving the new inventory, you can proceed with configuring permissions, groups, hosts, sources, and view completed jobs, if applicable to the type of inventory.

## Work with job templates

A job template is a definition and set of parameters for running an Ansible job.

A job template combines an Ansible playbook from a project and the settings required to launch it, including information about the target host against which the playbook will run, authentication information to access the host, and any other relevant variables . Job templates are useful to run the same job many times. Job templates also encourage the reuse of Ansible playbook content and collaboration between teams. For more information, see Job Templates in the Automation controller User Guide.

### Getting started with job templates

As part of the initial setup, a Demo Job Template is created for you.

1. To review existing templates, select  from the navigation panel.
2. Click Demo Job Template to view its details.

### Creating a job template

1. From the navigation panel, select .
2. On the Templates page, select Create job template from the Create template list.
3. Enter the appropriate details in the following fields:

[NOTE]
----
If a field has the Prompt on launch checkbox selected, launching the job prompts you for the value for that field when launching.
Most prompted values override any values set in the job template.
Exceptions are noted in the following table.
----

4. You can set the following options for launching this template, if necessary:
* Privilege escalation: If checked, you enable this playbook to run as an administrator.
This is the equal of passing the --become option to the ansible-playbook command.
* Provisioning callback: If checked, you enable a host to call back to automation controller through the REST API and start a job from this job template.
For more information, see [ADD 2.5 LINK][Provisioning Callbacks].
* Enable webhook: If checked, you turn on the ability to interface with a predefined SCM system web service that is used to launch a job template.
GitHub and GitLab are the supported SCM systems.
* If you enable webhooks, other fields display, prompting for additional information:
* Webhook service: Select which service to listen for webhooks from.
* Webhook URL: Automatically populated with the URL for the webhook service to POST requests to.
* Webhook key: Generated shared secret to be used by the webhook service to sign payloads sent to automation controller.
You must configure this in the settings on the webhook service in order for automation controller to accept webhooks from this service.
* Webhook credential: Optionally, give a GitHub or GitLab personal access token (PAT) as a credential to use to send status updates back to the webhook service.

Before you can select it, the credential must exist.

See [ADD 2.5 LINK][Credential Types] to create one.
* For additional information about setting up webhooks, see [ADD 2.5 LINK][Working with Webhooks].
* Concurrent jobs: If checked, you are allowing jobs in the queue to run simultaneously if not dependent on one another. Check this box if you want to run job slices simultaneously. For more information, see [ADD 2.5 LINK][Automation controller capacity determination and job impact].
* Enable fact storage: If checked, automation controller stores gathered facts for all hosts in an inventory related to the job running.
* Prevent instance group fallback: Check this option to allow only the instance groups listed in the Instance Groups field to run the job.
If clear, all available instances in the execution pool are used based on the hierarchy described in Control where a job runs.
5. Click Create job template, when you have completed configuring the details of the job template.

Creating the template does not exit the job template page but advances to the Job Template Details tab.
After saving the template, you can click Launch template to start the job.
You can also click Edit to add or change the attributes of the template, such as permissions, notifications, view completed jobs, and add a survey (if the job type is not a scan).
You must first save the template before launching, otherwise, Launch template remains disabled.

1. From the navigation panel, select .
2. Verify that the newly created template appears on the Templates page.

### Running a job template

One benefit of automation controller is the push-button deployment of Ansible playbooks.
You can configure a template to store all the parameters that you would normally pass to the Ansible playbook on the command line.
In addition to the playbooks, the template passes the inventory, credentials, extra variables, and all options and settings that you can specify on the command line.

### Editing a job template

As part of the initial setup, you can leave the default Demo Job Template as it is, but you can edit it later.

1. Open the template to edit it by using one of these methods:
* Click Edit in the job template Details page.
* From the navigation panel, select . Click Edit next to the template name and edit the appropriate details.
2. Save your changes.
![Job templates]
3. To exit after saving and return to the Templates list view, use the breadcrumb navigation links or click Cancel.
Clicking Save does not exit the Details dialog.

## Create and run a rulebook activation

In Event-Driven Ansible, a rulebook activation is a process running in the background defined by a decision environment executing a specific rulebook.

### Setting up a rulebook activation

* You are logged in to the Ansible Automation Platform Dashboard as a Content Consumer.
* You have set up a project.
* You have set up a decision environment.

1. Log in to the Ansible Automation Platform.
2. Navigate to the .
3. Click Create rulebook activation.
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Organization:: This field is optional.
Project:: Projects are a logical collection of rulebooks. This field is optional.
Rulebook:: Rulebooks are displayed according to the project selected.
Credential:: Select 0 or more credentials for this rulebook activation. This field is optional.

[NOTE]
----
The credentials that display in this field are customized based on your rulebook activation and only include the following credential types: Vault, Red Hat Ansible Automation Platform, or any custom credential types that you have created. For more information about credentials, see Setting up credentials for Event-Driven Ansible controller.
----
Decision environment:: Decision environments are a container image to run Ansible rulebooks.

[NOTE]
----
In Event-Driven Ansible controller, you cannot customize the pull policy of the decision environment.
By default, it follows the behavior of the always policy.
Every time an activation is started, the system tries to pull the most recent version of the image.
----
Restart policy:: This is the policy that determines how an activation should restart after the container process running the source plugin ends.
* Policies:
1. Always: This restarts the rulebook activation immediately, regardless of whether it ends successfully or not, and occurs no more than 5 times.
2. Never: This never restarts a rulebook activation when the container process ends.
3. On failure: This restarts the rulebook activation after 60 seconds by default, only when the container process fails, and occurs no more than 5 times.
Log level:: This field defines the severity and type of content in your logged events.
* Levels:
1. Error: Logs that contain error messages that are displayed in the History tab of an activation.
2. Info: Logs that contain useful information about rulebook activations, such as a success or failure, triggered action names and their related action events, and errors.
3. Debug: Logs that contain information that is only useful during the debug phase and might be of little value during production.
This log level includes both error and log level data.
Service name:: This defines a service name for Kubernetes to configure inbound connections if the activation exposes a port. This field is optional.
Rulebook activation enabled?:: This automatically enables the rulebook activation to run.
Variables:: The variables for the rulebook are in a JSON or YAML format.
The content would be equivalent to the file passed through the --vars flag of ansible-rulebook command.
Options:: Check the Skip audit events option if you do not want to see your events in the Rule Audit.
5. Click Create rulebook activation.

Your rulebook activation is now created and can be managed on the Rulebook Activations page.

After saving the new rulebook activation, the rulebook activation&#8217;s details page is displayed, with either a Pending, Running, or Failed status.
From there or the Rulebook Activations list view, you can restart or delete it.


[NOTE]
----
Occasionally, when a source plugin shuts down, it causes a rulebook to exit gracefully after a certain amount of time.
When a rulebook activation shuts down, any tasks that are waiting to be performed will be canceled, and an info level message is sent to the activation log.
For more information, see Rulebooks.
----

#### Rulebook activation list view

On the Rulebook Activations page, you can view the rulebook activations that you have created along with the Status, Number of rules with the rulebook, the Fire count, and Restart count.

If the Status is Running, it means that the rulebook activation is running in the background and executing the required actions according to the rules declared in the rulebook.

You can view more details by selecting the activation from the Rulebook Activations list view.

![Rulebook activation][width=25px]

For all activations that have run, you can view the Details and History tabs to get more information about what happened.

### Enabling and disabling rulebook activations

1. Select the switch on the row level to enable or disable your chosen rulebook.
2. In the window, select Yes, I confirm that I want to enable/disable these X rulebook activations.
3. Select Enable/Disable rulebook activation.

### Restarting rulebook activations


[NOTE]
----
You can only restart a rulebook activation if it is currently enabled and the restart policy was set to Always when it was created.
----

1. Select the More Actions icon &#8942; next to Rulebook Activation enabled/disabled toggle.
2. Select Restart rulebook activation.
3. In the window, select Yes, I confirm that I want to restart these X rulebook activations.
4. Select Restart rulebook activations.

### Deleting rulebook activations

1. Select the More Actions icon &#8942; next to the Rulebook Activation enabled/disabled toggle.
2. Select Delete rulebook activation.
3. In the window, select Yes, I confirm that I want to delete these X rulebook activations.
4. Select Delete rulebook activations.

### Activating webhook rulebooks

In Openshift environments, you can allow webhooks to reach an activation-job-pod over a given port by creating a Route that exposes that rulebook activation&#8217;s Kubernetes service.

* You have created a rulebook activation.


[NOTE]
----
The following is an example of rulebook with a given webhook:

```
- name: Listen for storage-monitor events
  hosts: all
  sources:
    - ansible.eda.webhook:
        host: 0.0.0.0
        port: 5000
  rules:
    - name: Rule - Print event information
    condition: event.meta.headers is defined
    action:
      run_job_template:
        name: StorageRemediation
        organization: Default
        job_args:
          extra_vars:
             message: from eda
             sleep: 1
```

----

1. Create a Route (on OpenShift Container Platform) to expose the service.
The following is an example Route for an ansible-rulebook source that expects POST's on port 5000 on the decision environment pod:

```
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: test-sync-bug
  namespace: dynatrace
  labels:
    app: eda
    job-name: activation-job-1-5000
spec:
  host: test-sync-bug-dynatrace.apps.aap-dt.ocp4.testing.ansible.com
  to:
    kind: Service
    name: activation-job-1-5000
    weight: 100
  port:
    targetPort: 5000
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
```

2. When you create the Route, test it with a Post to the Route URL:

```
curl -H "Content-Type: application/json" -X POST
test-sync-bug-dynatrace.apps.aap-dt.ocp4.testing.ansible.com -d
'{}'
```


[NOTE]
----
You do not need the port as it is specified on the Route (targetPort).
----

# Getting started as an automation operator

As an automation operator, Ansible Automation Platform can help you organize and manage automation projects using Red Hat certified collections or custom content for your organization.

To get started as a platform operator, see the following sections:

* Get started with playbooks
* Publishing to a collection in a source code manager
* Automation execution projects
* Build and use an execution environment
* Job templates
* About inventories
* Automation execution jobs

## Get started with playbooks

A playbook runs tasks in order from top to bottom. Within each play, tasks also run in order from top to bottom.

### Learn about playbooks

Playbooks with multiple “plays” can orchestrate multi-machine deployments, running one play on your web servers, another play on your database servers, and a third play on your network infrastructure.

For more information, see [ADD 2.5 LINK]Getting started with Ansible Playbooks.

## Writing a playbook

Create a playbook that pings your hosts and prints a “Hello world” message:

## Bundle content with Ansible roles

A role is like a customized piece of automation content that bundles together relevant bits from automation playbooks to fit your system&#8217;s specific needs. Roles are self-contained and portable, and can include groupings of tasks, variables, configuration templates, handlers, and other supporting files to orchestrate complicated automation flows.

Instead of creating huge playbooks with hundreds of tasks, you can use roles to break the tasks apart into smaller, more discrete units of work.

To learn more about roles, see What is an Ansible Role-and how is it used?.

### Creating a role

You can create roles using the Ansible Galaxy CLI tool, which is included with your Ansible Automation Platform bundle. Access role-specific commands from the roles subcommand:

## Learn about content collections

Ansible content collections are assemblages of automation content.

You can find Ansible Certified Collections in automation hub.

### Browse content

If you are not using the bundle installer, you can use a Red Hat-supplied Ansible Playbook to install validated content. For further information, see Ansible validated content.

You can update validated collections manually by downloading their updated packages in automation hub.

### Downloading content

After collections are finalized, you can import them to a location where they can be distributed to others across your organization.

1. Log in to Red Hat Ansible Automation Platform.
2. From the navigation panel, select Full Experience.
The automation hub UI is displayed.
3. From the navigation panel, select .
The Collections page displays all collections across all repositories.
You can search for a specific collection.
4. Select the collection that you want to export.
The collection details page opens.
5. From the Install tab, select Download tarball.
The .tar file is downloaded to your default browser downloads folder.
You can now import it to the location of your choosing.

## Publishing to a collection

You can configure your projects to be uploaded to the source control manager of your choice.

### Manage collections in automation hub

As a platform operator, you can use namespaces in automation hub to curate and manage collections for the following purposes:

* Create groups with permissions to curate namespaces and upload collections to private automation hub.
* Add information and resources to the namespace to help end users of the collection in their automation tasks.
* Upload collections to the namespace.
* Review the namespace import logs to decide the success or failure of uploading the collection and its current approval status.

For more information about collections, see ADD 2.5 LINK[Managing collections in automation hub].

### Uploading a collection to automation hub

If you want to share a collection that you have created with the rest of the Ansible community, you can upload it to automation hub.

## Build and use an execution environment

Automation execution environments are consistent and shareable container images that serve as Ansible control nodes.
Automation execution environments reduce the challenge of sharing Ansible content that has external dependencies.
If automation content is like a script that a developer has written, an automation execution environment is like a replica of that developer&#8217;s environment, thereby enabling you to reproduce and scale the automation content that the developer has written.

Automation execution environmentss make it easier for you to implement automation in a range of environments.

### Using the base automation execution environment

Your subscription with Ansible Automation Platform gives you access to some base automation execution environments. You can use a base automation execution environment as a starting point for creating a customized automation execution environment.

(ADD CONTENT)

#### Customize the base execution environment image

Ansible Automation Platform includes the following default execution environments:

* Minimal - Includes the latest Ansible-core 2.15 release along with Ansible Runner, but does not include collections or other content
* EE Supported - Minimal, plus all Red Hat-supported collections and dependencies

While these environments cover many automation use cases, you can add additional items to customize these containers for your specific needs. For more information about customizing your execution environment, see Customizing an existing automation execution environment image in the Creating and consuming execution environments guide.

#### About Ansible Builder

You also have the option of creating an entirely new execution environment with Ansible Builder.
Ansible Builder is a command line tool you can use to create an eexecution environment for Ansible.
You must create execution environment with Ansible Builder.

To build your own execution environment, you must:

* Download Ansible Builder
* Create a definition file that defines your execution environment
* Create an execution environment image based on the definition file

For more information about building an execution environment, see [ADD 2.5 LINK]: Creating and consuming execution environments.

### Adding an execution environment to a job template

* An execution environment must have been created using ansible-builder as described in [ADD 2.5 LINK]:Build an execution environment.
When an execution environment has been created, you can use it to run jobs.
Use the automation controller UI to specify the execution environment to use in your job templates.
* Depending on whether an execution environment is made available for global use or tied to an organization, you must have the appropriate level of administrator privileges to use an execution environment in a job.
Execution environments tied to an organization require Organization administrators to be able to run jobs with those execution environment.
* Before running a job or job template that uses an execution environment that has a credential assigned to it, ensure that the credential has a username, host, and password.

(ADD CONTENT)

#### About container registries

If you have many execution environment that you want to maintain, you can store them in a container registry linked to your private automation hub.

For more information, see [ADD 2.5 LINK]:Populating your private automation hub container registry from the Creating and consuming execution environments guide.

## Automation execution projects

A project is a logical collection of Ansible playbooks, represented in automation controller.

Platform administrators and automation developers have the permissions to create projects.
As an automation operator you can view and sync projects.

### Executing a project



## Work with job templates

A job template is a definition and set of parameters for running an Ansible job.

A job template combines an Ansible Playbook from a project and the settings required to launch it. Job templates are useful to run the same job many times. Job templates also encourage the reuse of Ansible Playbook content and collaboration between teams. For more information, see [ADD2.5 LINK][Job Templates] in the Automation controller User Guide.

Platform administrators and automation developers have the permissions to create job templates. As an automation operator you can launch job templates  and view their details.

### Launching a job template

Ansible Automation Platform offers push-button deployment of Ansible playbooks.
You can configure a template to store all the parameters that you would normally pass to the Ansible playbook on the command line.
In addition to the playbooks, the template passes the inventory, credentials, extra variables, and all options and settings that you can specify on the command line.

From the navigation panel, select .

## About inventories

An inventory is a file listing the collection of hosts managed by automation controller.
Organizations are assigned to inventories, while permissions to launch playbooks against inventories are controlled at the user or team level.

Platform administrators and automation developers have the permissions to create inventories.
As an automation operator you can view inventories and their details.

### Executing an inventory

1. From the navigation panel, select .
The Inventories window displays a list of inventories that are currently available, along with the following information:

## Automation execution jobs

A job is an instance of automation controller launching an Ansible Playbook against an inventory of hosts.

### Reviewing a job status

The Jobs list view displays a list of jobs and their statuses, shown as completed successfully, failed, or as an active (running) job.

1. From the navigation panel, select .

/ADD CONTENT

### Reviewing a job output

When you relaunch a job, the jobs Output view is displayed.

1. From the navigation panel, select .