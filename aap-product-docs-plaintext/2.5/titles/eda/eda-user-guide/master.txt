# Using automation decisions

Event-Driven Ansible controller is a new way to enhance and expand automation by improving IT speed and agility while enabling consistency and resilience.
Developed by Red Hat, this feature is designed for simplicity and flexibility.

# Providing feedback on Red Hat documentation

If you have a suggestion to improve this documentation, or find an error, you can contact technical support at https://access.redhat.com to open a request.

# Event-Driven Ansible controller overview

Event-Driven Ansible is a highly scalable, flexible automation capability that works with event sources such as other software vendors' monitoring tools.
These tools monitor IT solutions and identify events and automatically implement the documented changes or response in a rulebook to handle that event.

The following procedures form the user configuration:

* Setting up credentials
* Setting up a new project
* Setting up a new decision environment
* Setting up a rulebook activation
* Performance tuning for EDAcontroller


[NOTE]
----
* API documentation for Event-Driven Ansible controller is available at https://<eda-server-host>/api/eda/v1/docs
* To meet high availability demands, Event-Driven Ansible controller shares centralized Redis (REmote DIctionary Server) with the Ansible Automation Platform UI. When Redis is unavailable, you will not be able to create projects or enable rulebook activations.
----

# Credentials

You can use credentials to store secrets that can be used for authentication purposes with resources, such as decision environments, rulebook activations and projects for Event-Driven Ansible controller, and projects for automation controller.

Credentials authenticate users when launching jobs against machines and importing project content from a version control system.

You can grant users and teams the ability to use these credentials without exposing the credential to the user. If a user moves to a different team or leaves the organization, you do not have to rekey all of your systems just because that credential was previously available.

## Credentials list view

When you log in to the Ansible Automation Platform and select , the Credentials page has a pre-loaded Decision Environment Container Registry credential. When you create your own credentials, they will be added to this list view. .

From the menu bar, you can search for credentials in the Name search field.

You also have the following options in the menu bar:

* Choose how fields are shown in the list view by clicking the Manage columns icon. You have four options in which you can arrange your fields:
* Column -  Shows the column in the table.
* Description - Shows the column when the item is expanded as a full width description.
* Expanded - Shows the column when the item is expanded as a detail.
* Hidden - Hides the column.
* Choose between a List view or a Card view, by clicking the icons.

## Setting up credentials

You can create a credential to use with a source plugin or a private container registry that you select. You can make your credential available to a team or individuals.

1. Log in to the Ansible Automation Platform Dashboard.
2. From the navigation panel, select .
3. Click Create credential.
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Organization:: Click the list to select an organization or select Default.
Credential type:: Click the list to select your Credential type.

[NOTE]
----
When you select the credential type, the Type Details section is displayed with fields that are applicable for the credential type you chose.
----
5. Complete the fields that are applicable to the credential type you selected.
6. Click Create credential.

After saving the credential, the credentials details page is displayed.
From there or the Credentials list view, you can edit or delete it.

## Editing a credential

You can edit existing credentials to ensure the appropriate level of access for your organization.

1. Edit the credential by using one of these methods:
* From the Credentials list view, click the Edit credential icon next to the desired credential.
* From the Credentials list view, select the name of the credential, click Edit credential.
2. Edit the appropriate details and click Save credential.

## Deleting a credential

You can delete credentials if they are no longer needed for your organization.

1. Delete the credential by using one of these methods:
* From the Credentials list view, click the More Actions icon &#8942; next to the desired credential and click Delete credential.
* From the Credentials list view, select the name of the credential, click the More Actions icon &#8942; next to Edit credential, and click Delete credential.
2. In the pop-up window, select Yes, I confirm that I want to delete this credential.

[NOTE]
----
If your credential is still in use by other resources in your organization, a warning message is displayed letting you know that the credential cannot be deleted. Also, if your credential is being used in an event stream, you cannot delete it until the event stream is deleted or attached to a different credential. In general, avoid deleting a credential that is in use because it can lead to broken activations.
----
3. Click Delete credential.

You can delete multiple credentials at a time by selecting the checkbox next to each credential and clicking the More Actions icon &#8942; in the menu bar and then clicking Delete selected credentials.

# Credential types

Event-Driven Ansible controller comes with several built-in credental types that you can use for syncing projects, running rulebook activations, executing job templates through Automation Execution (automation controller), fetching images from container registries, and processing data through event streams.

These built-in credential types are not editable. So if you want credential types that support authentication with other systems, you can create your own credential types that can be used in your source plugins. Each credential type contains an input configuration and an injector configuration that can be passed to an Ansible rulebook to configure your sources.

For more information, see Custom credential types.

## Custom credential types

As a system administrator, you can define a custom credential type that works in ways similar to existing credential types in a standard format using a YAML or JSON-like definition.

Each credential type displays its own unique configurations in the Input Configuration field and the Injector Configuration field, if applicable. Custom credentials support Ansible extra variables as a means of injecting their authentication information.

You can attach one or more cloud, vault, and Red Hat Ansible Automation Platform credentials to a rulebook activation.


[NOTE]
----
* When creating a new credential type, you must avoid collisions in the extra_vars.
* Extra variable names must not start with EDA_ because they are reserved.
* You must have System administrator (superuser) permissions to be able to create and edit a credential type and to be able to view the Injector configuration field.
----

When you customize your own credential types, they will display on the Credential Types page along with a list of built-in credential types.

Each credential type displays its own unique configurations in the Input Configuration and the Injector Configuration fields, if applicable. Both YAML and JSON formats are supported in the configuration fields.

## Input Configuration

The Input configuration has two attributes:

* fields - a collection of properties for a credential type.
* required - a list of required fields.

Fields can have multiple properties, depending on the credential type you select.



## Injector Configuration

You can use the Injector configuration field to take the fields from input configuration field and map them into extra_vars that can be sent to ansible-rulebook when running the activation. The Injector currently only supports extra_vars.

Injectors enable you to tailor the fields so that they can be injected into a rulebook as extra_vars, which cannot have duplicate keys at the top level. If you have two sources in a rulebook that both require a parameter called username and password, the injectors, along with the rulebook, help you tailor the arguments for each source.

## Creating a new credential type

You can create a credential type to use with a source plugin that you select based on the supported, default credential types. You can make your credential type available to a team or individuals.

1. Log in to the Ansible Automation Platform Dashboard.
2. From the navigation panel, select .
3. Click Create credential type.
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
5. In the Input Configuration field, specify an input schema that defines a set of ordered fields for that type. The format can be in YAML or JSON:

YAML

fields:
  - type: string
    id: username
    label: Username
  - type: string
    id: password
    label: Password
    secret: true
required:
  - username
  - password

View more YAML examples at the YAML page.

JSON

{
"fields": [
  {
  "type": "string",
  "id": "username",
  "label": "Username"
  },
  {
  "secret": true,
  "type": "string",
  "id": "password",
  "label": "Password"
   }
  ],
 "required": ["username", "password"]
}

View more JSON examples at The JSON website.
6. In the Injector Configuration field, enter environment variables or extra variables that specify the values a credential type can inject.
The format can be in YAML or JSON (see examples in the previous step).

The following configuration in JSON format shows each field and how they are used:

{
    "extra_vars": {
      "some_extra_var": "{{ username }}:{{ password }}"
  }
}
7. Click Create credential type.

Your newly created credential type is displayed in the list of credential types:


8. Click the Edit credential type  icon to modify the credential type options.

[NOTE]
----
On the Edit page, you can modify the details or delete the credential.
If the Delete option is disabled, this means that the credential type is being used by a credential, and you must delete the credential type from all the credentials that use it before you can delete it.
----

* Verify that the newly created credential type can be selected from the Credential Type selection window when creating a new credential:



For information about how to create a new credential, see Setting up credentials.

# Projects

Projects are a logical collection of rulebooks.
They must be a git repository and only http protocol is supported.
The rulebooks of a project must be located in the path defined for Event-Driven Ansible content in Ansible collections: /extensions/eda/rulebooks at the root of the project.


[IMPORTANT]
----
To meet high availability demands, Event-Driven Ansible controller shares centralized Redis (REmote DIctionary Server) with the Ansible Automation Platform UI. When Redis is unavailable, you will not be able to create or sync projects.
----

## Setting up a new project

You can set up projects to manage and store your rulebooks in Event-Driven Ansible controller.

* You are logged in to the Ansible Automation Platform Dashboard as a Content Consumer.
* You have set up a credential, if necessary.
For more information, see the Setting up credentials section.
* You have an existing repository containing rulebooks that are integrated with playbooks contained in a repository to be used by automation controller.

1. Log in to the Ansible Automation Platform Dashboard.
2. Navigate to .
3. Click Create project.
4. Insert the following:
Name:: Enter project name.
Description:: This field is optional.
Source control type:: Git is the only source control type available for use. This field is optional.
Source control URL:: Enter Git, SSH, or HTTP[S] protocol address of a repository, such as GitHub or GitLab. This field is not editable.

[NOTE]
----
This field accepts SSH private key or private key phrase. To enable the use of these private keys, your project URL must begin with git@.
----
Proxy:: This is used to access access HTTP or HTTPS servers. This field is optional.
Source control branch/tag/commit:: This is the branch to checkout. In addition to branches, you can input tags, commit hashes, and arbitrary refs. Some commit hashes and refs may not be available unless you also provide a custom refspec. This field is optional.
Source control refspec:: A refspec to fetch (passed to the Ansible git module). This parameter allows access to references via the branch field not otherwise available. This field is optional.
For more information, see Examples.
Source control credential:: You must have this credential to utilize the source control URL. This field is optional.
Content signature validation credential:: Enable content signing to verify that the content has remained secure when a project is synced. If the content has been tampered with, the job will not run. This field is optional.
Options:: The Verify SSL option is enabled by default. Enabling this option verifies the SSL with HTTPS when the project is imported.

[NOTE]
----
You can disable this option if you have a local repository that uses self-signed certificates.
----
5. Select Create project.

Your project is now created and can be managed in the Projects page.

After saving the new project, the project&#8217;s details page is displayed.
From there or the Projects list view, you can edit or delete it.

## Projects list view

On the Projects page, you can view the projects that you have created along with the Status and the Git hash.


[NOTE]
----
If a rulebook changes in source control, you can re-sync a project by selecting the sync icon next to the project from the Projects list view.
The Git hash updates represent the latest commit on that repository.
An activation must be restarted or recreated if you want to use the updated project.
----

## Editing a project

1. From the Projects list view, select the More Actions icon &#8942; next to the desired project. The Edit page is displayed.
2. Enter the required changes and select Save project.

## Deleting a project

If you need to delete a project, the Event-Driven Ansible controller interface provides multiple options.

1. To delete a project, complete one of the following:
* From the Projects list view, select the checkbox next to the desired project, and click the More Actions icon &#8942; from the page menu.
* From the Projects list view, click the More Actions icon &#8942; next to the desired project.
2. Select Delete project.
3. In the Permanently delete projects window, select Yes, I confirm that I want to delete this project.
4. Select Delete project.

# Decision environments

Decision environments are a container image to run Ansible rulebooks.
They create a common language for communicating automation dependencies, and provide a standard way to build and distribute the automation environment.
The default decision environment is found in the Ansible-Rulebook.

To create your own decision environment refer to Building a custom decision environment for Event-Driven Ansible within Ansible Automation Platform.

## Setting up a new decision environment

The following steps describe how to import a decision environment into your Event-Driven Ansible controller Dashboard.

* You are logged in to the Event-Driven Ansible controller Dashboard as a Content Consumer.
* You have set up a credential, if necessary.
For more information, see the Setting up credentials section.
* You have pushed a decision environment image to an image repository or you chose to use the image de-supported provided at registry.redhat.io.

1. Log in to the Ansible Automation Platform Dashboard.
2. Navigate to .
3. Click Create decision environment.
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Image:: This is the full image location, including the container registry, image name, and version tag.
Credential:: This field is optional. This is the token needed to utilize the decision environment image.
5. Select Create decision environment.

Your decision environment is now created and can be managed on the Decision Environments page.

After saving the new decision environment, the decision environment&#8217;s details page is displayed.
From there or the Decision Environments list view, you can edit or delete it.

## Building a custom decision environment for Event-Driven Ansible within Ansible Automation Platform

Use the following instructions if you need a custom decision environment to provide a custom maintained or third-party event source plugin that is not available in the default decision environment.

* Ansible Automation Platform > = 2.4
* Event-Driven Ansible
* Ansible Builder > = 3.0

* Add the de-supported decision environment. This image is built from a base image provided by Red Hat called de-minimal.

[NOTE]
----
Red Hat recommends using de-minimal as the base image with Ansible Builder to build your custom decision environments.
----

The following is an example of the Ansible Builder definition file that uses de-minimal as a base image to build a custom decision environment with the ansible.eda collection:


```
version: 3

images:
  base_image:
    name: 'registry.redhat.io/ansible-automation-platform-24/de-minimal-rhel8:latest'

dependencies:
  galaxy:
    collections:
      - ansible.eda
  python_interpreter:
    package_system: "python39"

options:
  package_manager_path: /usr/bin/microdnf
```


Additionally, if you need other Python packages or RPMs, you can add the following to a single definition file:


```
version: 3

images:
  base_image:
    name: 'registry.redhat.io/ansible-automation-platform-24/de-minimal-rhel8:latest'

dependencies:
  galaxy:
    collections:
      - ansible.eda
  python:
    - six
    - psutil
  system:
    - iputils [platform:rpm]
  python_interpreter:
    package_system: "python39"

options:
  package_manager_path: /usr/bin/microdnf
```


# Red Hat Ansible Automation Platform credential

The Red Hat Ansible Automation Platform credential type can connect to automation controller through the use of an automation controller URL and a username and password. After you have created this credential type, it can be attached to a rulebook and used to run rulebook activations.

## Setting up a Red Hat Ansible Automation Platform credential

You can create a Red Hat Ansible Automation Platform credential type to run your rulebook activations.

* You have created a user.
* You have obtained the URL and the credentials to access automation controller.

1. Log in to the Red Hat Ansible Automation Platform Dashboard.
2. From the navigation panel, select .
3. Go to Create Credentials.
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Organization:: Click the list to select an organization or select Default.
Credential type:: Click the list and select Red Hat Ansible Automation Platform.

[NOTE]
----
When you select the credential type, the Type Details section is displayed with fields that are applicable for the credential type you chose.
----
5. In the required Red Hat Ansible Automation Platform field, enter your automation controller URL.

[NOTE]
----
For Event-Driven Ansible controller 2.5 with automation controller 2.4, use the following example: https://<your_controller_host>
For Ansible Automation Platform 2.5, use the following example: https://<your_gateway_host>/api/controller/
----
6. Enter a valid Username and Password or Oauth Token.
7. Click Create controller token.

After saving the credential, the credentials Details page is displayed. From there or the Credentials list view, you can edit or delete it.


[NOTE]
----
After you have saved the credential type for your credential, it cannot be changed.
----

# Rulebook activations

A rulebook is a set of conditional rules that Event-Driven Ansible uses to perform IT actions in an event-driven automation model.
Rulebooks are the means by which users tell Event-Driven Ansible which source to check for an event and when that event occurs what to do when certain conditions are met.

A rulebook specifies actions to be performed when a rule is triggered.
A rule gets triggered when the events match the conditions for the rules.
The following actions are currently supported:

* run_playbook (only supported with ansible-rulebook CLI)
* run_module
* run_job_template
* run_workflow_template
* set_fact
* post_event
* retract_fact
* print_event
* shutdown
* debug
* none

To view further details, see Actions.

A rulebook activation is a process running in the background defined by a decision environment executing a specific rulebook. You can set up your rulebook activation by following Setting up a rulebook activation.


[WARNING]
----
Red Hat does not recommend the use of a non-supported source plugin with 1 postgres database.
This can pose a potential risk to your use of Ansible Automation Platform.
----


[IMPORTANT]
----
To meet high availability demands, Event-Driven Ansible controller shares centralized Redis (REmote DIctionary Server) with the Ansible Automation Platform UI. When Redis is unavailable, the following functions will not be available:
* Creating an activation, if is_enabled is True
* Deleting an activation
* Enabling an activation, if not already enabled
* Disabling an activation, if not already disabled
* Restarting an activation
----

## Setting up a rulebook activation

* You are logged in to the Ansible Automation Platform Dashboard as a Content Consumer.
* You have set up a project.
* You have set up a decision environment.

1. Log in to the Ansible Automation Platform.
2. Navigate to the .
3. Click Create rulebook activation.
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Organization:: This field is optional.
Project:: Projects are a logical collection of rulebooks. This field is optional.
Rulebook:: Rulebooks are displayed according to the project selected.
Credential:: Select 0 or more credentials for this rulebook activation. This field is optional.

[NOTE]
----
The credentials that display in this field are customized based on your rulebook activation and only include the following credential types: Vault, Red Hat Ansible Automation Platform, or any custom credential types that you have created. For more information about credentials, see Setting up credentials for Event-Driven Ansible controller.
----
Decision environment:: Decision environments are a container image to run Ansible rulebooks.

[NOTE]
----
In Event-Driven Ansible controller, you cannot customize the pull policy of the decision environment.
By default, it follows the behavior of the always policy.
Every time an activation is started, the system tries to pull the most recent version of the image.
----
Restart policy:: This is the policy that determines how an activation should restart after the container process running the source plugin ends.
* Policies:
1. Always: This restarts the rulebook activation immediately, regardless of whether it ends successfully or not, and occurs no more than 5 times.
2. Never: This never restarts a rulebook activation when the container process ends.
3. On failure: This restarts the rulebook activation after 60 seconds by default, only when the container process fails, and occurs no more than 5 times.
Log level:: This field defines the severity and type of content in your logged events.
* Levels:
1. Error: Logs that contain error messages that are displayed in the History tab of an activation.
2. Info: Logs that contain useful information about rulebook activations, such as a success or failure, triggered action names and their related action events, and errors.
3. Debug: Logs that contain information that is only useful during the debug phase and might be of little value during production.
This log level includes both error and log level data.
Service name:: This defines a service name for Kubernetes to configure inbound connections if the activation exposes a port. This field is optional.
Rulebook activation enabled?:: This automatically enables the rulebook activation to run.
Variables:: The variables for the rulebook are in a JSON or YAML format.
The content would be equivalent to the file passed through the --vars flag of ansible-rulebook command.
Options:: Check the Skip audit events option if you do not want to see your events in the Rule Audit.
5. Click Create rulebook activation.

Your rulebook activation is now created and can be managed on the Rulebook Activations page.

After saving the new rulebook activation, the rulebook activation&#8217;s details page is displayed, with either a Pending, Running, or Failed status.
From there or the Rulebook Activations list view, you can restart or delete it.


[NOTE]
----
Occasionally, when a source plugin shuts down, it causes a rulebook to exit gracefully after a certain amount of time.
When a rulebook activation shuts down, any tasks that are waiting to be performed will be canceled, and an info level message is sent to the activation log.
For more information, see Rulebooks.
----

## Rulebook activation list view

On the Rulebook Activations page, you can view the rulebook activations that you have created along with the Status, Number of rules with the rulebook, the Fire count, and Restart count.

If the Status is Running, it means that the rulebook activation is running in the background and executing the required actions according to the rules declared in the rulebook.

You can view more details by selecting the activation from the Rulebook Activations list view.

![Rulebook activation][width=25px]

For all activations that have run, you can view the Details and History tabs to get more information about what happened.

### Viewing activation output

You can view the output of the activations in the History tab.

1. Select the History tab to access the list of all the activation instances.
An activation instance represents a single execution of the activation.
2. Then select the activation instance in question, this shows you the Output produced by that specific execution.

![Rulebook activation history]

To view events that came in and triggered an action, you can use the Rule Audit section in the Event-Driven Ansible controller Dashboard.

## Enabling and disabling rulebook activations

1. Select the switch on the row level to enable or disable your chosen rulebook.
2. In the window, select Yes, I confirm that I want to enable/disable these X rulebook activations.
3. Select Enable/Disable rulebook activation.

## Restarting rulebook activations


[NOTE]
----
You can only restart a rulebook activation if it is currently enabled and the restart policy was set to Always when it was created.
----

1. Select the More Actions icon &#8942; next to Rulebook Activation enabled/disabled toggle.
2. Select Restart rulebook activation.
3. In the window, select Yes, I confirm that I want to restart these X rulebook activations.
4. Select Restart rulebook activations.

## Deleting rulebook activations

1. Select the More Actions icon &#8942; next to the Rulebook Activation enabled/disabled toggle.
2. Select Delete rulebook activation.
3. In the window, select Yes, I confirm that I want to delete these X rulebook activations.
4. Select Delete rulebook activations.

## Activating webhook rulebooks

In Openshift environments, you can allow webhooks to reach an activation-job-pod over a given port by creating a Route that exposes that rulebook activation&#8217;s Kubernetes service.

* You have created a rulebook activation.


[NOTE]
----
The following is an example of rulebook with a given webhook:

```
- name: Listen for storage-monitor events
  hosts: all
  sources:
    - ansible.eda.webhook:
        host: 0.0.0.0
        port: 5000
  rules:
    - name: Rule - Print event information
    condition: event.meta.headers is defined
    action:
      run_job_template:
        name: StorageRemediation
        organization: Default
        job_args:
          extra_vars:
             message: from eda
             sleep: 1
```

----

1. Create a Route (on OpenShift Container Platform) to expose the service.
The following is an example Route for an ansible-rulebook source that expects POST's on port 5000 on the decision environment pod:

```
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: test-sync-bug
  namespace: dynatrace
  labels:
    app: eda
    job-name: activation-job-1-5000
spec:
  host: test-sync-bug-dynatrace.apps.aap-dt.ocp4.testing.ansible.com
  to:
    kind: Service
    name: activation-job-1-5000
    weight: 100
  port:
    targetPort: 5000
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
```

2. When you create the Route, test it with a Post to the Route URL:

```
curl -H "Content-Type: application/json" -X POST
test-sync-bug-dynatrace.apps.aap-dt.ocp4.testing.ansible.com -d
'{}'
```


[NOTE]
----
You do not need the port as it is specified on the Route (targetPort).
----

## Testing with Kubernetes

With Kubernetes you can create an Ingress, or expose the port, but not for production.

1. Run the following command to expose the port on the cluster for a given service:

```
kubectl port-forward svc/<ACTIVATION_SVC_NAME> 5000:5000
```

2. Make the HTTP requests against the localhost:5000 to trigger the rulebook:

```
curl -H "Content-Type: application/json" -X POST test-sync-bug-dynatrace.apps.aap-dt.ocp4.testing.ansible.com -d '{}'
```


# Rule Audit

Rule audit allows the auditing of rules which have been triggered by all the rules that were activated at some point.

The Rule Audit list view shows you a list of every time an event came in that matched a condition within a rulebook and triggered an action.
The list shows you rules within your rulebook and each heading matches up to a rule that has been executed.

## Viewing rule audit details

From the Rule Audit list view you can check the event that triggered specific actions.

![Rule audit list view]

1. From the navigation panel select .
2. Select the desired rule, this brings you to the Details tab.

From here you can view when it was created, when it was last fired, and the rulebook activation that it corresponds to.

## Viewing rule audit events

1. From the navigation panel, select .
2. Select the desired rule, this brings you to the Details tab. To view all the events that triggered an action, select the Events tab.
This shows you the event that triggered actions.
3. Select an event to view the Event log, along with the Source type and Timestamp.

![Event details]

## Viewing rule audit actions

1. From the navigation panel select .
2. Select the desired rule, then select the Actions tab.

From here you can view executed actions that were taken.
Some actions are linked out to automation controller where you can view the output.

# Performance tuning for Event-Driven Ansible controller

Event-Driven Ansible is a highly scalable, flexible automation capability.
Event-Driven Ansible controller provides the interface in which Event-Driven Ansible automation performs.
Tune your Event-Driven Ansible controller to optimize performance and scalability through:

* Characterizing your workload
* System level monitoring
* Performance troubleshooting

## Characterizing your workload

In Event-Driven Ansible controller, your workload includes the number of rulebook activations and events being received. Consider the following factors to characterize your Event-Driven Ansible controller workload:

1. Number of simultaneous rulebook activations
2. Number of events received by Event-Driven Ansible controller

### Modifying the number of simultaneous rulebook activations

By default, Event-Driven Ansible controller allows 12 rulebook activations to run simultaneously.
If more than 12 rulebook activations are created, the expected behavior is that subsequent rulebook activations wait until there is an available rulebook activation worker.
In this case, the rulebook activation status is displayed as Pending even if there is enough free memory and CPU on your Event-Driven Ansible controller instance.
To change this behavior, you must change the default maximum number of running rulebook activations.


[NOTE]
----
The value for MAX_RUNNING_ACTIVATIONS does not change when you modify the instance size, so it needs to be adjusted manually.
----

#### Modifying the number of simultaneous rulebook activations during Event-Driven Ansible controller installation

By default, Event-Driven Ansible controller allows 12 activations to run simultaneously.
You can modify this default value during installation by using the following procedure:

Provide a variable to the VM installer:

1. Navigate to the setup inventory file.
2. Add automationedacontroller_max_running_activations in the [all:vars] section.
For example, automationedacontroller_max_running_activations=16.
3. Run the setup.

#### Modifying the number of simultaneous rulebook activations after Event-Driven Ansible controller installation

By default, Event-Driven Ansible controller allows 12 activations to run simultaneously.
You can modify this default value after installation by using the following procedure:

1. Navigate to the environment file at /etc/ansible-automation-platform/eda/settings.yaml.
2. Choose the number of maximum running activations that you need.
For example, MAX_RUNNING_ACTIVATIONS = 16
3. Use the following command to restart Event-Driven Ansible services: automation-eda-controller-service restart

For more information about rulebook activations, see the Rulebook activations.

### Modifying the default memory limit for each rulebook activation

Memory usage is based on the number of events that Event-Driven Ansible controller has to process.
Each rulebook activation container has a 200MB memory limit.
For example, with 4 CPU and 16GB of RAM, one rulebook activation container with an assigned 200MB memory limit can not handle more than 150,000 events per minute.
If the number of parallel running rulebook activations is higher, then the maximum number of events each rulebook activation can process is reduced.
If there are too many incoming events at a very high rate, the container can run out of memory trying to process the events.
This will kill the container, and your rulebook activation will fail with a status code of 137.

To address this failure, you can increase the amount of memory allocated to rulebook activations in order to process a high number of events at a high rate by using one of the following procedures:

* Modifying the default memory limit for each rulebook activation during installation
* Modifying the default memory limit for each rulebook activation after installation

#### Modifying the default memory limit for each rulebook activation during installation

By default, each rulebook activation container has a 200MB memory limit.
You can modify this default value during installation by using the following procedure:

1. Navigate to the setup inventory file.
2. Add automationedacontroller_podman_mem_limit in the [all:vars] section.
For example, automationedacontroller_podman_mem_limit='400m'.
3. Run the setup.

#### Modifying the default memory limit for each rulebook activation after installation

By default, each rulebook activation container has a 200MB memory limit.
You can modify this default value after installation by using the following procedure:

1. Navigate to the environment file at /etc/ansible-automation-platform/eda/settings.yaml.
2. Modify the default container memory limit.
For example, PODMAN_MEM_LIMIT = '300m'.
3. Restart the Event-Driven Ansible controller services using automation-eda-controller-service restart.

## System level monitoring for Event-Driven Ansible controller

After characterizing your workload to determine how many rulebook activations you are running in parallel and how many events you are receiving at any given point, you must consider monitoring your Event-Driven Ansible controller  host at the system level.
Using system level monitoring to review information about Event-Driven Ansible’s performance over time helps when diagnosing problems or when considering capacity for future growth.

System level monitoring includes the following information:

* Disk I/O
* RAM utilization
* CPU utilization
* Network traffic

Higher CPU, RAM, or Disk utilization can affect the overall performance of Event-Driven Ansible controller.
For example, a high utilization of any of these system level resources indicates that either the Event-Driven Ansible controller is running too many rulebook activations, or some of the individual rulebook activations are using a high volume of resources.
In this case, you must increase your system level resources to support your workload.

## Performance Troubleshooting for Event-Driven Ansible controller

Based on the default parameters within Event-Driven Ansible controller, you might encounter scenarios that pose challenges to completing your workload.
The following section provides descriptions of these scenarios and troubleshooting guidance.

* My activation status displays as “running”, but it is not processing the events.
* Ensure that you are using the correct event source in the rulebook activation.
If the event you are expecting is coming from a source other than what is in the rulebook, Event-Driven Ansible controller will not process the event.
* My activation status displays as “running”, and Event-Driven Ansible controller is also receiving the events, but no actions are occuring.
* Ensure that you have set the correct conditions for matching the event and taking actions in the rulebook activation.
* My activation keeps restarting in an infinite loop.
* By default, the reset policy for rulebook activations is set to On Failure. Change the restart policy using the following procedure:
1. Navigate to .
2. Select the Restart Policy list to display the options.
3. Select the appropriate value: On Failure, Always, Never.

# Event-Driven Ansible logging strategy

Event-Driven Ansible offers an audit logging solution over its resources.
Each supported create, read, update and delete (CRUD) operation is logged against rulebook activations, event streams, decision environments, projects, and activations.
Some of these resources support further operations, such as sync, enable, disable, restart, start, and stop; for these operations, logging is supported as well.
These logs are only retained for the lifecycle of its associated container.
See the following sample logs for each supported logging operation.

## Logging samples

When the following APIs are called for each operation, you see the following audit logs:


```
1. Create
    1. 2024-08-15 14:13:20,384 aap_eda.api.views.activation INFO   Action: Create / ResourceType: RulebookActivation / ResourceName: quick_start_project / ResourceID: 53 / Organization: Default
2. Read
    1. 2024-08-15 14:21:26,844 aap_eda.api.views.activation INFO   Action: Read / ResourceType: RulebookActivation / ResourceName: quick_start_activation / ResourceID: 1 / Organization: Default
3. Disable
    1. 2024-08-15 14:23:57,798 aap_eda.api.views.activation INFO   Action: Disable / ResourceType: RulebookActivation / ResourceName: quick_start_activation / ResourceID: 1 / Organization: Default
4. Enable
    1. 2024-08-15 14:24:16,472 aap_eda.api.views.activation INFO   Action: Enable / ResourceType: RulebookActivation / ResourceName: quick_start_activation / ResourceID: 1 / Organization: Default
5. Delete
    1. 2024-08-15 14:24:53,847 aap_eda.api.views.activation INFO   Action: Delete / ResourceType: RulebookActivation / ResourceName: quick_start_activation / ResourceID: 1 / Organization: Default
6. Restart
    2024-08-15 14:24:34,169 aap_eda.api.views.activation INFO      Action: Restart / ResourceType: RulebookActivation / ResourceName: quick_start_activation / ResourceID: 1 / Organization: Default
```



```
1. Create
    1. 2024-08-15 13:46:26,903 aap_eda.api.views.webhook INFO     Action: Create / ResourceType: EventStream / ResourceName: ZackTest / ResourceID: 1 / Organization: Default
2. Update
    1. 2024-08-15 13:56:17,440 aap_eda.api.views.webhook INFO     Action: Update / ResourceType: EventStream / ResourceName: ZackTest / ResourceID: 1 / Organization: Default
3. Read
    1. 2024-08-15 13:56:56,271 aap_eda.api.views.webhook INFO     Action: Read / ResourceType: EventStream / ResourceName: ZackTest / ResourceID: 1 / Organization: Default
4. List
    1. 2024-08-15 13:56:17,492 aap_eda.api.views.webhook INFO     Action: List / ResourceType: EventStream / ResourceName: * / ResourceID: * / Organization: *
5. Delete
    1. 2024-08-15 13:57:13,124 aap_eda.api.views.webhook INFO     Action: Delete / ResourceType: EventStream / ResourceName: ZackTest / ResourceID: None / Organization: Default
```



```
1. Create
    1. 2024-08-15 14:10:53,311 aap_eda.api.views.decision_environment INFO     Action: Create / ResourceType: DecisionEnvironment / ResourceName: quick_start_de / ResourceID: 86 / Organization: Default
2. Read
    1. 2024-08-15 14:10:53,349 aap_eda.api.views.decision_environment INFO     Action: Read / ResourceType: DecisionEnvironment / ResourceName: quick_start_de / ResourceID: 86 / Organization: Default
3. Update
    2024-08-15 14:11:20,970 aap_eda.api.views.decision_environment INFO     Action: Update / ResourceType: DecisionEnvironment / ResourceName: quick_start_de / ResourceID: 86 / Organization: Default
4. Delete
2024-08-15 14:11:42,369 aap_eda.api.views.decision_environment INFO     Action: Delete / ResourceType: DecisionEnvironment / ResourceName: quick_start_de / ResourceID: None / Organization: Default
```



```
1. Create
    1. 2024-08-15 14:05:26,874 aap_eda.api.views.project INFO     Action: Create / ResourceType: Project / ResourceName: quick_start_project / ResourceID: 86 / Organization: Default
2. Read
    1. 2024-08-15 14:05:26,913 aap_eda.api.views.project INFO     Action: Read / ResourceType: Project / ResourceName: quick_start_project / ResourceID: 86 / Organization: Default
3. Update
    1. 2024-08-15 14:06:08,255 aap_eda.api.views.project INFO     Action: Update / ResourceType: Project / ResourceName: quick_start_project / ResourceID: 86 / Organization: Default
4. Sync
    1. 2024-08-15 14:06:30,580 aap_eda.api.views.project INFO     Action: Sync / ResourceType: Project / ResourceName: quick_start_project / ResourceID: 86 / Organization: Default
5. Delete
    1. 2024-08-15 14:06:49,481 aap_eda.api.views.project INFO     Action: Delete / ResourceType: Project / ResourceName: quick_start_project / ResourceID: 86 / Organization: Default
```



```
1. Start
    1. 2024-08-15 14:21:29,076 aap_eda.services.activation.activation_manager INFO     Requested to start activation 1, starting.
    2024-08-15 14:21:29,093 aap_eda.services.activation.activation_manager INFO     Creating a new activation instance for activation: 1
    2024-08-15 14:21:29,104 aap_eda.services.activation.activation_manager INFO     Starting container for activation instance: 1
2. Stop
    1. eda-activation-worker-1  | 2024-08-15 14:40:52,547 aap_eda.services.activation.activation_manager INFO     Stop operation requested for activation id: 2 Stopping activation.
    eda-activation-worker-1  | 2024-08-15 14:40:52,550 aap_eda.services.activation.activation_manager INFO     Activation 2 is already stopped.
    eda-activation-worker-1  | 2024-08-15 14:40:52,550 aap_eda.services.activation.activation_manager INFO     Activation manager activation id: 2 Activation restart scheduled for 1 second.
    eda-activation-worker-1  | 2024-08-15 14:40:52,562 rq.worker INFO     activation: Job OK (activation-2)
```
