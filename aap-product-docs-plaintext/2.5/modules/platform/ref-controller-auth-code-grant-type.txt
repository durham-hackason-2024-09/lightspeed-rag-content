# Application using authorization code grant type

The application authorization code grant type should be used when access tokens must be issued directly to an external application or service.


[NOTE]
----
You can only use the authorization code type to acquire an access token when using an application.
When integrating an external web application with automation controller, that web application might need to create OAuth2 Tokens on behalf of users in that other web application.
Creating an application in automation controller with the authorization code grant type is the preferred way to do this because:
* This allows an external application to obtain a token from automation controller for a user, using their credentials.
* Compartmentalized tokens issued for a particular application enables those tokens to be easily managed. For example, revoking all tokens associated with that application without having to revoke all tokens in the system.
To create an application named AuthCodeApp with the authorization-code grant type, perform a POST to the /api/v2/applications/ endpoint:
----

{
    "name": "AuthCodeApp",
    "user": 1,
    "client_type": "confidential",
    "redirect_uris": "http://<controller>/api/v2",
    "authorization_grant_type": "authorization-code",
    "skip_authorization": false
}

.. _`Django-oauth-toolkit simple test application`: http://django-oauth-toolkit.herokuapp.com/consumer/

The workflow that occurs when you issue a GET to the authorize endpoint from the client application with the response_type, client_id, redirect_uris, and scope:

1. Automation controller responds with the authorization code and status to the redirect_uri specified in the application.
2. The client application then makes a POST to the api/o/token/ endpoint on automation controller with the code, client_id,
client_secret, grant_type, and redirect_uri.
3. Automation controller responds with the access_token, token_type, refresh_token, and expires_in.

For more information, and to test this flow, see Test Your Authorization Server in the Django OAuth Toolkit.

You can specify the number of seconds an authorization code remains valid on the System settings page:



Requesting an access token after this duration fails.

The duration defaults to 600 seconds (10 minutes), based on the RFC6749 recommendation.

The best way to set up application integrations using the Authorization Code grant type is to allowlist the origins for those cross-site requests.
More generally, you must allowlist the service or application you are integrating with automation controller, for which you want
to provide access tokens.

To do this, have your Administrator add this allowlist to their local automation controller settings in /etc/tower/conf.d/custom.py:

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"http://django-oauth-toolkit.herokuapp.com*",
    r"http://www.example.com*"
]

Where http://django-oauth-toolkit.herokuapp.com and http://www.example.com are applications requiring tokens with which to access automation controller.