# Prerequisites for upgrading Ansible Automation Platform

Before you begin to upgrade Ansible Automation Platform, ensure your environment meets the following node and configuration requirements.

# Node requirements

The following specifications are required for the nodes involved in the Ansible Automation Platform upgrade process:

* 16 GB of RAM for controller nodes, database node, execution nodes and hop nodes.
* 4 CPUs for controller nodes, database nodes, execution nodes, and hop nodes.
* 150 GB+ disk space for database node.
* 40 GB+ disk space for non-database nodes.
* DHCP reservations use infinite leases to deploy the cluster with static IP addresses.
* DNS records for all nodes.
* Red Hat Enterprise Linux 8 or later 64-bit (x86) installed for all nodes.
* Chrony configured for all nodes.
* Python 3.9 or later for all content dependencies.

# Automation controller configuration requirements

The following automation controller configurations are required before you proceed with the Ansible Automation Platform upgrade process:

Each Ansible Automation Platform node in the cluster must have access to an NTP server. Use the chronyd to synchronize the system clock with NTP servers. This ensures that cluster nodes using SSL certificates that require validation do not fail if the date and time between nodes are not in sync.

This is required for all nodes used in the upgraded Ansible Automation Platform cluster:

1. Install chrony:

```
# dnf install chrony --assumeyes
```

2. Open /etc/chrony.conf using a text editor.
3. Locate the public server pool section and modify it to include the appropriate NTP server addresses. Only one server is required, but three are recommended. Add the 'iburst' option to speed up the time it takes to properly sync with the servers:

```
# Use public servers from the pool.ntp.org project.
# Please consider joining the pool (http://www.pool.ntp.org/join.html).
server <ntp-server-address> iburst
```

4. Save changes within the /etc/chrony.conf file.
5. Start the host and enable the chronyd daemon:

```
# systemctl --now enable chronyd.service
```

6. Verify the chronyd daemon status:

```
# systemctl status chronyd.service
```


Red Hat Ansible Automation Platform requires you to have valid subscriptions attached to all nodes. You can verify that your current node has a Red Hat subscription by running the following command:


```
# subscription-manager list --consumed
```


If there is no Red Hat subscription attached to the node, see Attaching your Ansible Automation Platform subscription for more information.

Before you upgrade Ansible Automation Platform, it is recommended to create a non-root user with sudo privileges for the deployment process. This user is used for:

* SSH connectivity.
* Passwordless authentication during installation.
* Privilege escalation (sudo) permissions.

The following example uses ansible to name this user. On all nodes used in the upgraded Ansible Automation Platform cluster, create a non-root user named ansible and generate an SSH key:

1. Create a non-root user:

```
# useradd ansible
```

2. Set a password for your user:

```
# passwd ansible 1
Changing password for ansible.
Old Password:
New Password:
Retype New Password:
```

Replace ansible with the non-root user from step 1, if using a different name
3. Generate an ssh key as the user:

```
$ ssh-keygen -t rsa
```

4. Disable password requirements when using sudo:

```
# echo "ansible ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers.d/ansible
```


With the ansible user created, copy the ssh key to all the nodes used in the upgraded Ansible Automation Platform cluster. This ensures that when the Ansible Automation Platform installation runs, it can ssh to all the nodes without a password:


```
$ ssh-copy-id ansible@node-1.example.com
```



[NOTE]
----
If running within a cloud provider, you might need to instead create an ~/.ssh/authorized_keys file containing the public key for the ansible user on all your nodes and set the permissions to the authorized_keys file to only the owner (ansible) having read and write access (permissions 600).
----

Configure the firewall settings on all the nodes used in the upgraded Ansible Automation Platform cluster to allow access to the appropriate services and ports for a successful Ansible Automation Platform upgrade. For Red Hat Enterprise Linux 8 or later, enable the firewalld daemon to enable the access needed for all nodes:

1. Install the firewalld package:

```
# dnf install firewalld --assumeyes
```

2. Start the firewalld service:

```
# systemctl start firewalld
```

3. Enable the firewalld service:

```
# systemctl enable --now firewalld
```


# Ansible Automation Platform configuration requirements

The following Ansible Automation Platform configurations are required before you proceed with the Ansible Automation Platform upgrade process:

After upgrading your Red Hat Ansible Automation Platform instance, add the automation mesh port on the mesh nodes (execution and hop nodes) to enable automation mesh functionality. The default port used for the mesh networks on all nodes is 27199/tcp. You can configure the mesh network to use a different port by specifying recptor_listener_port as the variable for each node within your inventory file.

Within your hop and execution node set the firewalld port to be used for installation.

1. Ensure that firewalld is running:

```
$ sudo systemctl status firewalld
```

2. Add the firewalld port to your controller database node (e.g. port 27199):

```
$ sudo firewall-cmd --permanent --zone=public --add-port=27199/tcp
```

3. Reload firewalld:

```
$ sudo firewall-cmd --reload
```

4. Confirm that the port is open:

```
$ sudo firewall-cmd --list-ports
```
