# Collections and content signing in private automation hub

As an automation administrator for your organization, you can configure private automation hub for signing and publishing Ansible content collections from different groups within your organization.
For additional security, automation creators can configure Ansible-Galaxy CLI to verify these collections to ensure that they have not been changed after they were uploaded to automation hub.

# Configuring content signing on private automation hub

To successfully sign and publish Ansible Certified Content Collections, you must configure private automation hub for signing.

* Your GnuPG key pairs have been securely set up and managed by your organization.
* Your public-private key pair has proper access for configuring content signing on private automation hub.

1. Create a signing script that accepts only a filename.

[NOTE]
----
This script acts as the signing service and must generate an ascii-armored detached gpg signature for that file using the key specified through the PULP_SIGNING_KEY_FINGERPRINT environment variable.
----

The script prints out a JSON structure with the following format.

```
{"file": "filename", "signature": "filename.asc"}
```


All the file names are relative paths inside the current working directory.
The file name must remain the same for the detached signature.
Example:

The following script produces signatures for content:

```shell
#!/usr/bin/env bash

FILE_PATH=$1
SIGNATURE_PATH="$1.asc"

ADMIN_ID="$PULP_SIGNING_KEY_FINGERPRINT"
PASSWORD="password"

# Create a detached signature
gpg --quiet --batch --pinentry-mode loopback --yes --passphrase \
   $PASSWORD --homedir ~/.gnupg/ --detach-sign --default-key $ADMIN_ID \
   --armor --output $SIGNATURE_PATH $FILE_PATH

# Check the exit status
STATUS=$?
if [ $STATUS -eq 0 ]; then
   echo {\"file\": \"$FILE_PATH\", \"signature\": \"$SIGNATURE_PATH\"}
else
   exit $STATUS
fi
```


After you deploy a private automation hub with signing enabled to your Ansible Automation Platform cluster, new UI additions are displayed in collections.
2. Review the Ansible Automation Platform installer inventory file for options that begin with automationhub_*.

```
[all:vars]
.
.
.
automationhub_create_default_collection_signing_service = True
automationhub_auto_sign_collections = True
automationhub_require_content_approval = True
automationhub_collection_signing_service_key = /abs/path/to/galaxy_signing_service.gpg
automationhub_collection_signing_service_script = /abs/path/to/collection_signing.sh
```


The two new keys (automationhub_auto_sign_collections and automationhub_require_content_approval) indicate that the collections must be signed and approved after they are uploaded to private automation hub.

# Using content signing services in private automation hub

After you have configured content signing on your private automation hub, you can manually sign a new collection or replace an existing signature with a new one.
When users download a specific collection, this signature indicates that the collection is for them and has not been modified after certification.

You can use content signing on private automation hub in the following scenarios:

* Your system does not have automatic signing configured and you must use a manual signing process to sign collections.
* The current signatures on the automatically configured collections are corrupted and need new signatures.
* You need additional signatures for previously signed content.
* You want to rotate signatures on your collections.

1. Log in to your Ansible Automation Platform.
2. From the navigation panel, select menu:Automation Content[Collection Approvals].
The Approval dashboard opens and displays a list of collections.
3. Click btn:[Sign and approve] for each collection that you want to sign.

* Verify that the collections you signed and manually approved are displayed in the Collections tab.

# Downloading signature public keys

After you sign and approve collections, download the signature public keys from the automation hub UI.
You must download the public key before you add it to the local system keyring.

1. Log in to your automation hub.
2. From the navigation panel, select menu:MenuTopAC[Signature Keys].
The Signature Keys dashboard displays a list of multiple keys: collections and container images.
* To verify collections, download the key prefixed with collections-.
* To verify container images, download the key prefixed with container-.
3. Choose one of the following methods to download your public key:
* Select the menu icon and click btn:[Download Key] to download the public key.
* Select the public key from the list and click the Copy to clipboard icon.
* Click the drop-down menu under the Public Key tab and copy the entire public key block.

Use the public key that you copied to verify the content collection that you are installing.

# Configuring Ansible-Galaxy CLI to verify collections

You can configure Ansible-Galaxy CLI to verify collections.
This ensures that downloaded collections are approved by your organization and have not been changed after they were uploaded to automation hub.

If a collection has been signed by automation hub, the server provides ASCII armored, GPG-detached signatures to verify the authenticity of MANIFEST.json before using it to verify the collectionâ€™s contents.
You must opt into signature verification by configuring a keyring for ansible-galaxy or providing the path with the --keyring option.

* Signed collections are available in automation hub to verify signature.
* Certified collections can be signed by approved roles within your organization.
* Public key for verification has been added to the local system keyring.

1. To import a public key into a non-default keyring for use with ansible-galaxy, run the following command.

```
gpg --import --no-default-keyring --keyring ~/.ansible/pubring.kbx my-public-key.asc
```


[NOTE]
----
In addition to any signatures provided by the automation hub, signature sources can also be provided in the requirements file and on the command line.
Signature sources should be URIs.
----
2. To verify the collection name provided on the CLI with an additional signature, run the following command:

```
ansible-galaxy collection install namespace.collection
--signature https://examplehost.com/detached_signature.asc
--signature file:///path/to/local/detached_signature.asc --keyring ~/.ansible/pubring.kbx
```


You can use this option multiple times to provide multiple signatures.
3. Confirm that the collections in a requirements file list any additional signature sources following the collection's signatures key, as in the following example.

```yaml
# requirements.yml
collections:
  - name: ns.coll
    version: 1.0.0
    signatures:
      - https://examplehost.com/detached_signature.asc
      - file:///path/to/local/detached_signature.asc

ansible-galaxy collection verify -r requirements.yml --keyring ~/.ansible/pubring.kbx
```


When you install a collection from automation hub, the signatures provided by the server are saved along with the installed collections to verify the collection&#8217;s authenticity.
4. (Optional) If you need to verify the internal consistency of your collection again without querying the Ansible Galaxy server, run the same command you used previously using the --offline option.

## Are there any recommendations for collection naming?

Create a collection with company_name.product format.
This format means that multiple products can have different collections under the company namespace.

## How do I get a namespace on Ansible automation hub?

By default namespaces used on Ansible Galaxy are also used on Ansible automation hub by the Ansible partner team.
For any queries and clarifications contact ansiblepartners@redhat.com.