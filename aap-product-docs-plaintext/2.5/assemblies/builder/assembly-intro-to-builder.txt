# Introduction to Automation execution environments

Using Ansible content that depends on non-default dependencies can be complicated because the packages must be installed on each node, interact with other software installed on the host system, and be kept in sync.
Automation execution environments help simplify this process and can easily be created with Ansible Builder.

# About automation execution environments

All automation in Red Hat Ansible Automation Platform runs on container images called automation execution environments.
Automation execution environments create a common language for communicating automation dependencies, and offer a standard way to build and distribute the automation environment.

An automation execution environment should contain the following:

* Ansible Core 2.15 or later
* Python 3.8-3.11
* Ansible Runner
* Ansible content collections and their dependencies
* System dependencies

## Why use automation execution environments?

With automation execution environments, Red Hat Ansible Automation Platform has transitioned to a distributed architecture by separating the control plane from the execution plane.
Keeping automation execution independent of the control plane results in faster development cycles and improves scalability, reliability, and portability across environments.
Red Hat Ansible Automation Platform also includes access to Ansible content tools, making it easy to build and manage automation execution environments.

In addition to speed, portability, and flexibility, automation execution environments provide the following benefits:

* They ensure that automation runs consistently across multiple platforms and make it possible to incorporate system-level dependencies and collection-based content.
* They give Red Hat Ansible Automation Platform administrators the ability to provide and manage automation environments to meet the needs of different teams.
* They allow automation to be easily scaled and shared between teams by providing a standard way of building and distributing the automation environment.
* They enable automation teams to define, build, and update their automation environments themselves.
* Automation execution environments provide a common language to communicate automation dependencies.