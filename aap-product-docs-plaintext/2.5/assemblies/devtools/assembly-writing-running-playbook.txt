# Writing and running a playbook with Ansible developer tools

# Writing your first playbook

The instructions below describe how Ansible developer tools help you to create and run your first playbook in VS Code.

* You have installed and opened the Ansible VS Code extension.
* You have opened a terminal in VS Code.
* You have installed ansible-devtools.

1. Create a new .yml file in VS Code for your playbook, for example example_playbook.yml. Put it in the same directory level as the example site.yml file.
2. Add the following example code into the playbook file and save the file.
The playbook consists of a single play that executes a ping to your local machine.

```
- name: My first play
  hosts: localhost
  tasks:
    - name: Ping my hosts
      ansible.builtin.ping:
```


Ansible-lint runs in the background and displays errors in the Problems tab of the terminal.
There are no errors in this playbook:
![Ansible-lint showing no errors in a playbook]
3. Save your playbook file.

# Inspecting your playbook

The Ansible VS Code extension provides syntax highlighting and assists you with indentation in .yml files.

The following rules apply for playbook files:

* Every playbook file must finish with a blank line.
* Trailing spaces at the end of lines are not allowed.
* Every playbook and every play require an identifier (name).

## Inline help

The Ansible extension also provides inline help when you are editing your playbook file.

* If you hover your mouse over a keyword or a module name, the Ansible extension provides documentation:
![Ansible-lint showing no errors in a playbook]
* If you begin to type the name of a module, for example ansible.builtin.ping, the extension provides a list of suggestions.

Select one of the suggestions to autocomplete the line.
![Ansible-lint showing no errors in a playbook]

# Running your playbook

The Ansible VS Code extension provides two options to run your playbook:

* ansible-playbook runs the playbook on your local machine using Ansible Core.
* ansible-navigator runs the playbook in an execution environment in the same manner that Ansible Automation Platform runs an automation job.
You specify the base image for the execution environment in the Ansible extension settings.

## Running your playbook with ansible-playbook

* To run a playbook, right-click the playbook name in the Explorer pane, then select menu:Run Ansible Playbook via[Run playbook via ansible-playbook].



The output is displayed in the Terminal tab of the VS Code terminal.
The ok=2 and failed=0 messages indicate that the playbook ran successfully.



## Running your playbook with ansible-navigator

* In the Ansible extension settings, enable the use of an execution environment in Ansible Execution Environment > Enabled.
* Enter the path or URL for the execution environment image in Ansible > Execution Environment: Image.

1. To run a playbook, right-click the playbook name in the Explorer pane, then select menu:Run Ansible Playbook via[Run playbook via ansible-navigator run].

The output is displayed in the Terminal tab of the VS Code terminal.
The Successful status indicates that the playbook ran successfully.


2. Enter the number next to a play to step into the play results.
The example playbook only contains one play.
Enter 0 to view the status of the tasks executed in the play.



Type the number next to a task to review the task results.

For more information on running playbooks with automation content navigator, see
Executing a playbook from automation content navigator.

## Working with execution environments

You can view the automation execution environments provided by Red Hat in the
Red Hat Ecosystem Catalog.

Click on an execution environment for information on how to download it.

For example, to download the minimal RHEL 8 base image, run the following command:


```
$ podman pull registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9
```


You can build and create custom execution environments with ansible-builder.
For more information about working with execution environments locally, see
Creating and consuming execution environments.

After customizing your execution environment, you can push your new image to the container registry in automation hub. See
Publishing an automation execution environment
in the Creating and consuming execution environments documentation.
Creating and consuming execution environments.

# Debugging your playbook

## Error messages

The following playbook contains multiple errors:


```
- name:
  hosts: localhost
  tasks:
   - name:
     ansible.builtin.ping:
```


The errors are indicated with a wavy underline in VS Code.
Hover your mouse over an error to view the details:

![Popup message explaining a playbook error]

The errors are listed in the Problems tab of the VS Code terminal.
Playbook files that contain errors are indicated with a number in the Explorer pane:

![Playbook errors shown in Problems tab and explorer list]

$[0].tasks[0].name None is not of type 'string' indicates that the playbook does not have a label.

# Testing your playbooks

To test your playbooks in your project, run them in a non-production environment such as a lab setup or a virtual machine.

Automation content navigator (ansible-navigator) is a text-based user interface (TUI) for developing and troubleshooting Ansible content with execution environments.

Running a playbook using ansible-navigator generates verbose output that you can inspect to check whether the playbook is running the way you expected.
You can specify the execution environment that you want to run your playbooks on, so that your tests replicate the production setup on Ansible Automation Platform:

* To run a playbook on an execution environment, run the following command from the terminal in VS Code:

```
$ ansible-navigator run <playbook_name.yml> -eei <execution_environment_name>
```


For example, to execute a playbook called site.yml on the Ansible Automation Platform RHEL 9 minimum execution environment, run the following command from the terminal in VS Code.

```
ansible-navigator run site.yml --eei ee-minimal-rhel8
```


The output is displayed in the terminal.
You can inspect the results and step into each play and task that was executed.

For more information about running playbooks, refer to
Running Ansible playbooks with automation content navigator
in the Automation content navigator creator guide.