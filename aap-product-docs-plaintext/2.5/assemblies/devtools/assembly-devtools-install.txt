# Installing Ansible developer tools

Red Hat provides two options for installing Ansible developer tools.
Both options require VS Code (Visual Studio Code) with the Ansible extension added.
* Installation on a RHEL container running inside VS Code.
You can install this option on MacOS, Windows, and Linux systems.
* Installation on your local RHEL system using an RPM (Red Hat Package Manager) package.

# Requirements

Ansible developer tools require Python 3.10 or later.

# Installing VS Code

To install VS Code, follow the instructions on the Download Visual Studio Code page in the Visual Studio Code documentation.

# Installing the VS Code Ansible extension

The Ansible extension adds language support for Ansible to VS Code.
It incorporates Ansible developer tools to facilitate creating and running automation content.

For a full description of the Ansible extension, see the Visual Studio Code Marketplace.

See Learning path - Getting Started with the Ansible VS Code Extension for tutorials on working with the extension.

To install the Ansible VS Code extension:

1. Open VS Code.
2. Click the Extensions () icon in the Activity Bar, or click menu:View[Extensions], to display the Extensions view.
3. In the search field in the Extensions view, type Ansible Red Hat.
4. Select the Ansible extension and click btn:[Install].

When the Ansible extension is enabled, create or open a .yml file in VS Code. It can be an empty file.
The  language identified for the .yml file is Ansible.
It is displayed in the Status bar.

When the language for a file is recognized as Ansible, the Ansible extension provides features such as auto-completion, hover, diagnostics, and goto.

# Configuring Ansible extension settings

The Ansible extension supports multiple configuration options.

You can configure the settings for the extension on a user level, on a workspace level, or for a particular directory.
User-based settings are applied globally for any instance of VS Code that is opened.
Workspace settings are stored within your workspace and only apply when the current workspace is opened.

It is useful to configure settings for your workspace for the following reasons:

* If you define and maintain configurations specific to your playbook project,
you can customize your Ansible development environment for individual projects without altering your preferred setup for other work.
You can have different settings for a Python project, an Ansible project, and a C++ project, each optimized for the respective stack without the need to manually reconfigure settings each time you switch projects.
* If you include workspace settings when setting up version control for a project you want to share with your team, everyone uses the same configuration for that project.

1. Open the Ansible extension settings:
1. Click the 'Extensions' icon in the activity bar.
2. Select the Ansible extension, and click the 'gear' icon and then Extension Settings to display the extension settings.

Alternatively, click menu:Code[Settings&gt;Settings] to open the Settings page.
3. Enter Ansible in the search bar to display the settings for the extension.
2. Select the Workspace tab to configure your settings for the current VS Code workspace.
3. The Ansible extension settings are pre-populated.
Modify the settings to suit your requirements:
* Check the menu:Ansible[Validation > Lint: Enabled] box to enable ansible-lint.
* Check the Ansible Execution Environment: Enabled box to use an execution environment.
* Specify the execution environment image you want to use in the Ansible > Execution Environment: image field.
* To use Red Hat Ansible Lightspeed, check the Ansible > Lightspeed: Enabled box, and enter the URL for Lightspeed.

The settings are documented on the Ansible VS Code Extension by Red Hat page in the VisualStudio marketplace documentation.

# Installing Ansible developer tools on a container inside VS Code

The Dev Containers VS Code extension requires a config file to store settings for your dev containers.
After you have created a config file for your dev container, reopen your directory in a container in VS Code.

1. You have installed a containerization platform, for example Podman, Podman Desktop, Docker, or Docker Desktop.
2. You have a Red Hat login and you can login to the Red Hat registry at registry.redhat.io.
3. You have installed VS Code.
4. You have installed the Ansible extension in VS Code.
5. You have installed the Microsoft Dev Containers extension in VS Code.

1. In VS Code, open the directory where you want to store the configuration files for your development container.
2. Create a subdirectory called .devcontainer.
3. In the .devcontainer directory, create a file called devcontainer.json.

You must use different settings depending on whether you are using Podman or Docker.
* If you are using Podman or Podman desktop, add the following text to devcontainer.json:

```
{
  "name": "ansible-dev-container-podman",
  "image": "registry.redhat.io/ansible-automation-platform-25/ansible-dev-tools-rhel8:latest",
  "containerUser": "root",
  "runArgs": [
    "--cap-add=SYS_ADMIN",
    "--cap-add=SYS_RESOURCE",
    "--device",
    "/dev/fuse",
    "--security-opt",
    "seccomp=unconfined",
    "--security-opt",
    "label=disable",
    "--security-opt",
    "apparmor=unconfined",
    "--userns=host",
    "--hostname=ansible-dev-container",
    "--volume",
    "ansible-dev-tools-container-storage:/var/lib/containers"
  ],
  "customizations": {
    "VS Codevscode": {
      "extensions": ["redhat.ansible"]
    }
  }
}
```

* If you are using Docker or Docker desktop, add the following text to devcontainer.json:

```
{
  "name": "ansible-dev-container-docker",
  "image": "registry.redhat.io/ansible-automation-platform-25/ansible-dev-tools-rhel8:latest",
  "containerUser": "podman",
  "runArgs": [
    "--security-opt",
    "seccomp=unconfined",
    "--security-opt",
    "label=disable",
    "--cap-add=SYS_ADMIN",
    "--cap-add=SYS_RESOURCE",
    "--device",
    "/dev/fuse",
    "--security-opt",
    "apparmor=unconfined",
    "--hostname=ansible-dev-container"
  ],
  "updateRemoteUserUID": true,
  "customizations": {
    "VS Codevscode": {
      "extensions": ["redhat.ansible"]
    }
  }
}
```

4. Reopen the directory in a container.
* If VS Code detects that your directory contains the devcontainer.json file, the following notification appears:
![Reopen in container]

Click Reopen in Container.
* If the notification does not appear, click the Remote () icon. In the dropdown menu that appears, select Reopen in Container.

The Remote () status in the VS Code Status bar displays opening Remote and a notification indicates the progress in opening the container.

When the directory reopens in a container, the Remote () status displays Dev Container: ansible-dev-container.

# Installing Ansible developer tools from a package on RHEL

Ansible developer tools is bundled in the Ansible Automation Platform RPM (Red Hat Package Manager) package.
Refer to the Red Hat Ansible Automation Platform Installation guide documentation for information on installing Ansible Automation Platform.

* You have installed RHEL.
* You have registered your system with Red Hat Subscription Manager.

1. Run the following command to check whether Simple Content Access (SCA) is enabled:

```shell
$ su subscription-manager status
```


If Simple Content Access is enabled, the output contains the following message:

```
Content Access Mode is set to Simple Content Access.
```

1. If Simple Content Access is not enabled, attach the Red Hat Ansible Automation Platform SKU:

```shell
$ subscription-manager attach --pool=<sku-pool-id>
```

2. Install Ansible developer tools with the following command:

```shell
$ sudo dnf install --enablerepo=ansible-automation-platform-2.4-for-rhel-8-x86_64-rpms ansible-dev-tools
```


```
$ sudo dnf install --enablerepo=ansible-automation-platform-2.4-for-rhel-9-x86_64-rpms ansible-dev-tools
```


Verify that the Ansible developer tools components have been installed:


```shell
$ rpm -aq | grep ansible
```


The output displays the Ansible packages that are installed:


```
ansible-sign-0.1.1-2.el9ap.noarch
ansible-creator-24.4.1-1.el9ap.noarch
python3.11-ansible-runner-2.4.0-0.1.20240412.git764790f.el9ap.noarch
ansible-runner-2.4.0-0.1.20240412.git764790f.el9ap.noarch
ansible-builder-3.1.0-0.2.20240413.git167ed5c.el9ap.noarch
ansible-dev-environment-24.1.0-2.el9ap.noarch
ansible-core-2.16.6-0.1.20240413.gite636132.el9ap.noarch
python3.11-ansible-compat-4.1.11-2.el9ap.noarch
python3.11-pytest-ansible-24.1.2-1.el9ap.noarch
ansible-lint-6.14.3-4.el9ap.noarch
ansible-navigator-3.4.1-2.el9ap.noarch
python3.11-tox-ansible-24.2.0-1.el9ap.noarch
ansible-dev-tools-2.5-2.el9ap.noarch
```


On successful installation, you can view the help documentation for ansible-creator:


```
$ ansible-creator --help

usage: ansible-creator [-h] [--version] command ...

The fastest way to generate all your ansible content.

Positional arguments:
 command
  add           Add resources to an existing Ansible project.
  init          Initialize a new Ansible project.

Options:
 --version      Print ansible-creator version and exit.
 -h     --help  Show this help message and exit
```
