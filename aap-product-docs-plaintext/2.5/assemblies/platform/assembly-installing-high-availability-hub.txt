# Installing a high availability automation hub

Configure the Ansible Automation Platform installer to install automation hub in a highly available (HA) configuration. Install HA automation hub on SELinux by creating mount points and adding the appropriate SELinux contexts to your Ansible Automation Platform environment.

# High availability automation hub

Use the following examples to populate the inventory file to install a highly available automation hub. This inventory file includes a highly available automation hub with a clustered setup.

You can configure your HA deployment further to enable a high availability deployment of automation hub on SELinux.

* Specify the IP address for your database host, using the automation_pg_host and automation_pg_port inventory variables. For example:


```
automationhub_pg_host='192.0.2.10'
automationhub_pg_port=5432
```


* Also specify the IP address for your database host in the [database] section, using the value in the automationhub_pg_host inventory variable:


```
[database]
192.0.2.10
```


* If installing a clustered setup, replace localhost ansible_connection=local in the [automationhub] section with the hostname or IP of all instances. For example:


```
[automationhub]
automationhub1.testing.ansible.com ansible_user=cloud-user ansible_host=192.0.2.18
automationhub2.testing.ansible.com ansible_user=cloud-user ansible_host=192.0.2.20
automationhub3.testing.ansible.com ansible_user=cloud-user ansible_host=192.0.2.22
```


Check that the following directives are present in /etc/pulp/settings.py in each of the private automation hub servers:


```
USE_X_FORWARDED_PORT = True
USE_X_FORWARDED_HOST = True
```



[NOTE]
----
If automationhub_main_url is not specified, the first node in the [automationhub] group will be used as default.
----

# Enabling a high availability (HA) deployment of automation hub on SELinux

You can configure the inventory file to enable high availability deployment of automation hub on SELinux. You must create two mount points for /var/lib/pulp and /var/lib/pulp/pulpcore_static, and then assign the appropriate SELinux contexts to each.


[NOTE]
----
You must add the context for /var/lib/pulp pulpcore_static and run the Ansible Automation Platform installer before adding the context for /var/lib/pulp.
----

* You have already configured a NFS export on your server.

1. Create a mount point at /var/lib/pulp:

```
$ mkdir /var/lib/pulp/
```

2. Open /etc/fstab using a text editor, then add the following values:

```
srv_rhel8:/data /var/lib/pulp nfs defaults,_netdev,nosharecache,context="system_u:object_r:var_lib_t:s0" 0 0
srv_rhel8:/data/pulpcore_static /var/lib/pulp/pulpcore_static nfs defaults,_netdev,nosharecache,context="system_u:object_r:httpd_sys_content_rw_t:s0" 0 0
```

3. Run the reload systemd manager configuration command:

```
$ systemctl daemon-reload
```

4. Run the mount command for /var/lib/pulp:

```
$ mount /var/lib/pulp
```

5. Create a mount point at /var/lib/pulp/pulpcore_static:

```
$ mkdir /var/lib/pulp/pulpcore_static
```

6. Run the mount command:

```
$ mount -a
```

7. With the mount points set up, run the Ansible Automation Platform installer:

```
$ setup.sh -- -b --become-user root
```

8. After the installation is complete, unmount the /var/lib/pulp/ mount point.

1. Apply the appropriate SELinux context.
2. Configure the pulpcore.serivce.

* See the SELinux Requirements on the Pulp Project documentation for a list of SELinux contexts.
* See the Filesystem Layout for a full description of Pulp folders.