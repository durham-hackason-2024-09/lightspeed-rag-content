# Configuring an authentication type

Ansible Automation Platform provides multiple authenticator plugins that you can configure to simplify the login experience for your organization. These are the authenticator plugins that are provided:
* Local
* LDAP
* SAML
* TACACS+
* Radius
* Azure
* Google OAuth
* Generic OIDC
* Keycloak
* GitHub
* GitHub organization
* GitHub team
* GitHub enterprise
* GitHub enterprise organization
* GitHub enterprise team

# Configuring local authentication

As a platform administrator, you can configure local system authentication. With local authentication, users and their passwords are checked against local system accounts.


[NOTE]
----
A local authenticator is automatically created by the Ansible Automation Platform installation process, and is configured with the specified admin credentials in the inventory file before installation. After successful installation, you can log in to the Ansible Automation Platform using those credentials.
----

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select Local from the Authentication type list and click btn:[Next].
4. Enter a Name for this Local configuration. The configuration name is required, must be unique across all authenticators, and must not be longer than 512 characters.
5. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
6. To automatically create organizations, users, and teams upon successful login, select Create objects.
7. To enable this authentication method upon creation, select Enabled.
8. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
9. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

# Configuring LDAP authentication

As a platform administrator, you can configure LDAP as the source for account authentication information for Ansible Automation Platform users.

When LDAP is configured, an account is created for any user who logs in with an LDAP username and password and they can be automatically placed into organizations as either regular users or organization administrators.

Users created through an LDAP login should not change their username, first name, last name, or set a local password for themselves. Any changes made to this information is overwritten the next time the user logs in to the platform.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select LDAP from the Authentication type list and click btn:[Next].
4. Enter a Name for this LDAP configuration. The configuration name is required, must be unique across all authenticators, and must not be longer than 512 characters.
5. In the LDAP Server URI field, enter or modify the list of LDAP servers to which you want to connect. This field supports multiple addresses.
6. In the LDAP Bind DN text field, enter the Distinguished Name (DN) to specify the user that the Ansible Automation Platform uses to connect to the LDAP server. For example:

```
CN=josie,CN=users,DC=website,DC=com
```

7. In the LDAP Bind Password text field, enter the password to use for the binding user.
8. Select a group type from the LDAP Group Type list.

[NOTE]
----
The LDAP group types that are supported by the Ansible Automation Platform use the underlying django-auth-ldap library.
----
9. To use LDAP User DN Template as an alternative to user search, enter the name of the template. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of the LDAP User Search setting.
10. LDAP Start TLS is disabled by default. To enable TLS when the LDAP connection is not using SSL, set the switch to On.
include::snippets/snip-gw-authentication-additional-auth-fields.adoc
11. Enter any LDAP Connection Options to set for the LDAP connection.
12. In the LDAP Group Type Parameters field, enter the parameters required for the LDAP Group Type you previously selected to identify LDAP groups and the members that belong to those groups.

To determine the parameters that a specific LDAP Group Type requires, refer to the django_auth_ldap documentation on the classes init parameters.
13. In the LDAP Group Search field, specify which groups should be searched and how to search them.
14. In the LDAP User Attribute Map field, enter user attributes to map LDAP fields to your Ansible Automation Platform users for example, email or first_name.
15. In the LDAP User Search field, enter where to search for users during authentication.
16. To automatically create organizations, users, and teams upon successful login, select Create objects.
17. To enable this authentication method upon creation, select Enabled.
18. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
19. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

# Configuring SAML authentication

SAML allows the exchange of authentication and authorization data between an Identity Provider (IdP) and a Service Provider (SP). Ansible Automation Platform is a SAML SP that can be configured to talk with one or more SAML IdPs in order to authenticate users. Based on groups and attributes optionally provided by the IdP users can be placed into teams and organizations in Ansible Automation Platform based on authenticator maps tied to this authenticator.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select SAML from the Authentication type list and click btn:[Next].
4. Enter a Name for this SAML configuration.
5. Enter the application-defined unique identifier used as the audience of the SAML service provider configuration in the SAML Service Provider Entity ID field. This is usually the URL for the service.
6. Include the certificate content in the SAML Service Provider Public Certificate field.
7. Include the private key content in the SAML Service Provider Private Key.
8. Enter the URL to redirect the user to for login initiation in the IdP Login URL field.
9. Enter the public cert used for secrets coming from the IdP in the IdP Public Cert field.
10. Enter the entity ID returned in the assertion in the Entity ID.
.Enter user details in the Groups, User Email, Username, User Last Name, User First Name and User Permanent ID fields.
11. The SAML Assertion Consumer Service (ACS) URL field registers the service as a service provider (SP) with each identity provider (IdP) you have configured.
include::snippets/snip-gw-authentication-additional-auth-fields.adoc
12. In the SAML Service Provider Organization Info field, provide the URL, display name, and the name of your app.

```
{
  "en-US": {
    "url": "http://www.example.com",
    "displayname": "Example",
    "name": "example"
  }
}
```

13. In the SAML Service Provider Technical Contact field, provide the name and email address of the technical contact for your service provider.

```
{
"givenName": "Some User",
"emailAddress": "suser@example.com"
}
```

14. In the SAML Service Provider Support Contact field, provide the name and email address of the support contact for your service provider.

```
{
"givenName": "Some User",
"emailAddress": "suser@example.com"
}
```

15. Optional: Provide extra configuration data in the SAML Service Provider extra configuration data field. This field is the equivalent to the SOCIAL_AUTH_SAML_SP_EXTRA in the API. For more information, see OneLogin’s SAML Python Toolkit to learn about the valid service provider extra (SP_EXTRA) parameters.
16. Optional: Provide security settings in the SAML Security Config field. This field is the equivalent to the SOCIAL_AUTH_SAML_SECURITY_CONFIG field in the API.

```
// Indicates whether the <samlp:AuthnRequest> messages sent by this SP // will be signed. [Metadata of the SP will offer this info] "authnRequestsSigned": false,

// Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> // and <samlp:LogoutResponse> elements received by this SP to be signed. "wantMessagesSigned": false,

// Indicates a requirement for the <saml:Assertion> elements received by // this SP to be signed. [Metadata of the SP will offer this info] "wantAssertionsSigned": false,
```


For more information and additional options, see OneLogin’s SAML Python Toolkit.
17. Optional: In the SAML IDP to extra_data attribute mapping field, enter values to map  IDP attributes to extra_data attributes. For more information, see advanced SAML settings.
18. To automatically create organizations, users, and teams upon successful login, select Create objects.
19. To enable this authentication method upon creation, select Enabled.
20. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
21. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

# Configuring TACACS+ authentication

Terminal Access Controller Access-Control System Plus (TACACS+) is a protocol that handles remote authentication and related services for networked access control through a centralized server. TACACS+ provides authentication, authorization and accounting (AAA) services, in which you can configure Ansible Automation Platform to use as a source for authentication.


[NOTE]
----
This feature is deprecated and will be removed in a future release.
----

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select TACACS+ from the Authentication type list and click btn:[Next].
4. Enter a Name for this TACACS+ configuration.
5. Enter the following information:
* Hostname of TACACS+ Server: Provide the hostname or IP address of the TACACS+ server with which to authenticate. If you leave this field blank, TACACS+ authentication is disabled.
* TACACS+ Authentication Protocol: The protocol used by the TACACS+ client. The options are ascii or pap.
* Shared secret for authenticating to TACACS+ server: The secret key for TACACS+ authentication server.
6. The TACACS+ client address sending enabled is disabled by default. To enable client address sending, select the checkbox.
7. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
8. To automatically create organizations, users, and teams upon successful login, select Create objects.
9. To enable this authentication method upon creation, select Enabled.
10. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.

Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

# Configuring Microsoft Azure active directory authentication

To set up enterprise authentication for Microsoft Azure Active Directory (AD), you need to obtain an OAuth2 key and secret by registering your organization-owned application from Azure using the Quickstart: Register an application with the Microsoft identity platform.

Each key and secret must belong to a unique application and cannot be shared or reused between different authentication backends. To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration. See dDisplaying authenticator details for instructions on accessing this information.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select Azuread from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. Click btn:[Edit], copy and paste Microsoft’s Application (Client) ID to the OIDC Key field.

Following instructions for registering your application with the Microsoft identity platform, supply the key (shown at one time only) to the client for authentication.
6. Copy and paste the secret key created for your Microsoft Azure AD application to the OIDC Secret field.
7. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
8. To automatically create organizations, users, and teams upon successful login, select Create objects.
9. To enable this authentication method upon creation, select Enabled.
10. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.

Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

For application registering basics in Microsoft Azure AD, see the What is the Microsoft identity platform? overview.

# Configuring Google OAuth2 authentication

To set up social authentication for Google, you must obtain an OAuth2 key and secret for a web application. To do this, you must first create a project and set it up with Google.

For instructions, see Setting up OAuth 2.0 in the Google API Console Help documentation.

If you have already completed the setup process, you can access those credentials by going to the Credentials section of the Google API Manager Console. The OAuth2 key (Client ID) and secret (Client secret) are used to supply the required fields in the UI.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select Google OAuth from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication setting.
5. The Google OAuth2 Key and Google OAuth2 Secret fields are pre-populated.

If not, use the credentials Google supplied during the web application setup process. Save these settings for use in the following steps.
6. Copy and paste Google’s Client ID into the Google OAuth2 Key field.
7. Copy and paste Google’s Client secret into the Google OAuth2 Secret field.
8. Optional: Enter information for the following fields using the tooltips provided for instructions and required format:
* Access Token URL
* Access Token Method
* Authorization URL
* Revoke Token Method
* Revoke Token URL
* OIDC JWT Algorithm(s)
* OIDC JWT
9. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
10. To automatically create organizations, users, and teams upon successful login, select Create objects.
11. To enable this authentication method upon creation, select Enabled.
12. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.

Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

# Configuring generic OIDC authentication

OpenID Connect (OIDC) uses the OAuth 2.0 framework. It enables third-party applications to verify the identity and obtain basic end-user information. The main difference between OIDC and SAML is that SAML has a service provider (SP)-to-IdP trust relationship, whereas OIDC establishes the trust with the channel (HTTPS) that is used to obtain the security token. To obtain the credentials needed to set up OIDC with Ansible Automation Platform, see the documentation from the IdP of your choice that has OIDC support.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select Generic OIDC from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. Enter the following information:
* OIDC Provider URL: The URL for your OIDC provider.
* OIDC Key: The client ID from your third-party IdP.
* OIDC Secret: The client secret from your IdP.
6. Optional: Select the HTTP method to be used when requesting an access token from the Access Token Method list. The default method is POST.
7. Optionally enter information for the following fields using the tooltips provided for instructions and required format:
* Access Token Method - The default method is POST.
* Access Token URL
* Access Token Method
* Authorization URL
* ID Key
* ID Token Issuer
* JWKS URI
* OIDC Public Key
* Revoke Token Method - The default method is GET.
* Revoke Token URL
* Response Type
* Token Endpoint Auth Method
* Userinfo URL
* Username Key
8. Use the Verify OIDC Provider Certificate to enable or disable the OIDC provider SSL certificate verification.
9. Use the Redirect State to enable or disable the state parameter in the redirect URI. It is recommended that this is enabled to prevent Cross Site Request Forgery (CSRF) attacks.
10. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
11. To automatically create organizations, users, and teams upon successful login, select Create objects.
12. To enable this authentication method upon creation, select Enabled.
13. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
14. Click btn:[Next].


[NOTE]
----
Team and organization mappings for OIDC are currently not supported. The OIDC adapter does authentication only and not authorization. It is only capable of authenticating whether this user is who they say they are. It does not authorize what this user is enabled to do. Configuring generic OIDC creates the UserID appended with an ID or key to differentiate the same user ID originating from two different sources and therefore, considered different users. So you get an ID of just the user name and the second is the username-<random number>.
----

# Configuring keycloak authentication

You can configure Ansible Automation Platform to integrate Keycloak to manage user authentication.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select Keycloak from the Authentication type list and click btn:[Next].
4. Enter a Name for this keycloak configuration. The configuration name is required, must be unique across all authenticators, and must not be longer than 512 characters.
5. Enter the location where the user's token can be retrieved in the Keycloak Access Token URL field.
6. Optional: Enter the redirect location the user is taken to during the login flow in the Keycloak Provider URL field.
7. Enter the Client ID from your Keycloak installation in the Keycloak OIDC Key field.
8. Enter the RS256 public key provided by your Keycloak realm in the Keycloak Public Key field.
9. Enter the OIDC secret (Client Secret) from your Keycloak installation in the Keycloak OIDC Secret field.
10. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
11. To automatically create organizations, users, and teams upon successful login, select Create objects.
12. To enable this authentication method upon creation, select Enabled.
13. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
14. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

# Configuring GitHub authentication

You can connect GitHub identities to Ansible Automation Platform using OAuth. To set up GitHub authentication, you need to obtain an OAuth2 key and secret by registering your organization-owned application from GitHub using the registering the new application with GitHub.

The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI. To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration. See Displaying authenticator details for instructions on accessing this information.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select GitHub from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. When the application is registered, GitHub displays the Client ID and Client Secret:
1. Copy and paste the GitHub Client ID into the GitHub OAuth2 Key field.
2. Copy and paste the GitHub Client Secret into the GitHub OAuth2 Secret field.
6. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
7. To automatically create organizations, users, and teams upon successful login, select Create objects.
8. To enable this authentication method upon creation, select Enabled.
9. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
10. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

# Configuring GitHub organization authentication

When defining account authentication with either an organization or a team within an organization, you should use the specific organization and team settings. Account authentication can be limited by an organization and by a team within an organization.
You can also choose to permit all by specifying non-organization or non-team based settings.
You can limit users who can log in to the platform by limiting only those in an organization or on a team within an organization.

To set up social authentication for a GitHub organization, you must obtain an OAuth2 key and secret for a web application using the registering the new application with GitHub.

The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI. To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration. See Displaying authenticator details for instructions on accessing this information.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select GitHub organization from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. When the application is registered, GitHub displays the Client ID and Client Secret:
1. Copy and paste the GitHub Client ID into the GitHub OAuth2 Key field.
2. Copy and paste the GitHub Client Secret into the GitHub OAuth2 Secret field.
6. Enter the name of your GitHub organization, as used in your organization’s URL, for example, https://github.com/<yourorg>/ in the GitHub OAuth Organization Name field.
7. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
8. Enter the authorization scope for users in the GitHub OAuth2 Scope field. The default is read:org.
9. To automatically create organizations, users, and teams upon successful login, select Create objects.
10. To enable this authentication method upon creation, select Enabled.
11. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
12. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

# Configuring GitHub team authentication

To set up social authentication for a GitHub team, you must obtain an OAuth2 key and secret for a web application using the instructions provided in registering the new application with GitHub.

The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI. To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration. See Displaying authenticator details for instructions on accessing this information.

Each key and secret must belong to a unique application and cannot be shared or reused between different authentication backends. The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select GitHub team from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. When the application is registered, GitHub displays the Client ID and Client Secret:
1. Copy and paste the GitHub Client ID into the GitHub OAuth2 Key field.
2. Copy and paste the GitHub Client Secret into the GitHub OAuth2 Secret field.
6. Copy and paste GitHub’s team ID in the GitHub OAuth2 Team ID field.
7. Enter the authorization scope for users in the GitHub OAuth2 Scope field. The default is read:org.
8. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
9. To automatically create organizations, users, and teams upon successful login, select Create objects.
10. To enable this authentication method upon creation, select Enabled.
11. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
12. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

# Configuring GitHub enterprise authentication

To set up social authentication for a GitHub enterprise, you must obtain a GitHub Enterprise URL, an API URL, OAuth2 key and secret for a web application.

To obtain the URLs, refer to the GitHub Enterprise administration documentation.

The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI. To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration. See Displaying authenticator details for instructions on accessing this information.

Each key and secret must belong to a unique application and cannot be shared or reused between different authentication backends. The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select GitHub enterprise from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. When the application is registered, GitHub displays the Client ID and Client Secret:
1. Copy and paste the GitHub Client ID into the GitHub OAuth2 Key field.
2. Copy and paste the GitHub Client Secret into the GitHub OAuth2 Secret field.
6. In the Base URL field, enter the hostname of the GitHub Enterprise instance, for example, https://github.example.com.
7. In the Github OAuth2 Enterprise API URL field, enter the API URL of the GitHub Enterprise instance, for example, https://github.example.com/api/v3.
8. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
9. To automatically create organizations, users, and teams upon successful login, select Create objects.
10. To enable this authentication method upon creation, select Enabled.
11. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
12. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

# GitHub Enterprise Organization settings

To set up social authentication for a GitHub Enterprise Organization, you must obtain a GitHub Enterprise Organization URL, an Organization API URL, an Organization OAuth2 key and secret for a web application.

To obtain the URLs, refer to the GitHub Enterprise administration documentation.

The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI. To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration. See Displaying authenticator details for instructions on accessing this information.

Each key and secret must belong to a unique application and cannot be shared or reused between different authentication backends. The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select GitHub enterprise organization from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. When the application is registered, GitHub displays the Client ID and Client Secret:
1. Copy and paste the GitHub Client ID into the GitHub OAuth2 Key field.
2. Copy and paste the GitHub Client Secret into the GitHub OAuth2 Secret field.
6. In the Base URL field, enter the hostname of the GitHub Enterprise instance, for example, https://github.example.com.
7. In the Github OAuth2 Enterprise API URL field, enter the API URL of the GitHub Enterprise instance, for example, https://github.example.com/api/v3.
8. Enter the name of your GitHub Enterprise organization, as used in your organization’s URL, for example, https://github.com/<yourorg>/ in the GitHub OAuth2 Enterprise Org Name field.
9. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
10. To automatically create organizations, users, and teams upon successful login, select Create objects.
11. To enable this authentication method upon creation, select Enabled.
12. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
13. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

# Configuring GitHub enterprise team authentication

To set up social authentication for a GitHub enterprise team, you must obtain a GitHub Enterprise Organization URL, an Organization API URL, an Organization OAuth2 key and secret for a web application.

To obtain the URLs, refer to the GitHub Enterprise administration documentation.

To obtain the key and secret, you must first register your enterprise organization-owned application at https://github.com/organizations/<yourorg>/settings/applications.

The OAuth2 key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI. To register the application, you must supply it with your webpage URL, which is the Callback URL shown in the Authenticator details for your authenticator configuration. See Displaying authenticator details for instructions on accessing this information.

Each key and secret must belong to a unique application and cannot be shared or reused between different authentication  backends.
The OAuth2key (Client ID) and secret (Client Secret) are used to supply the required fields in the UI.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select GitHub enterprise team from the Authentication type list and click btn:[Next].
4. Enter a Name for this authentication configuration.
5. When the application is registered, GitHub displays the Client ID and Client Secret:
1. Copy and paste the GitHub Client ID into the GitHub OAuth2 Key field.
2. Copy and paste the GitHub Client Secret into the GitHub OAuth2 Secret field.
6. In the Base URL field, enter the hostname of the GitHub Enterprise instance, for example, https://github.orgexample.com.
7. In the Github OAuth2 Enterprise API URL field, enter the API URL of the GitHub Enterprise instance, for example, https://github.example.com/api/v3.
8. Enter the OAuth2 key (Client ID) from your GitHub developer application in the GitHub OAuth2 team ID field.
9. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
10. To automatically create organizations, users, and teams upon successful login, select Create objects.
11. To enable this authentication method upon creation, select Enabled.
12. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
13. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.

To verify that the authentication is configured correctly, log out of Ansible Automation Platform and check that the login screen displays the logo of your authentication chosen method to enable logging in with those credentials.

# Configuring RADIUS authentication

You can configure Ansible Automation Platform to centrally use RADIUS as a source for authentication information.

1. From the navigation panel, select menu:Access Management[Authentication Methods].
2. Click btn:[Create authentication].
3. Select Radius from the Authentication type list and click btn:[Next].
4. Click btn:[Create authentication].
5. Enter the host or IP of the RADIUS server in the RADIUS Server field. If you leave this field blank, RADIUS authentication is disabled.
6. Enter the Shared secret for authenticating to RADIUS server.
7. Optional: Enter any Additional Authenticator Fields that this authenticator can take. These fields are not validated and are passed directly back to the authenticator.

[NOTE]
----
Values defined in this field override the dedicated fields provided in the UI.
----
8. To automatically create organizations, users, and teams upon successful login, select Create objects.
9. To enable this authentication method upon creation, select Enabled.
10. To remove a user for any groups they were previously added to when they authenticate from this source, select Remove users.
11. Click btn:[Next].

To control which users are allowed into the Ansible Automation Platform server, and placed into Ansible Automation Platform organizations or teams based on their attributes (like username and email address) or to what groups they belong, continue to Mapping.