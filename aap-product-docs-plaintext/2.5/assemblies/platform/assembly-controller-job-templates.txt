# Working with job templates

A job template combines an Ansible playbook from a project and the settings required to launch it.
Job templates are useful to run the same job many times. Job templates also encourage the reuse of Ansible playbook content and collaboration between teams.
For more information, see Job Templates in Using automation execution.

# Getting started with job templates

As part of the initial setup, a Demo Job Template is created for you.

1. To review existing templates, select menu:Automation Execution[Templates] from the navigation panel.
2. Click btn:[Demo Job Template] to view its details.

# Creating a job template

1. From the navigation panel, select menu:Automation Execution[Templates].
2. On the Templates page, select Create job template from the Create template list.
3. Enter the appropriate details in the following fields:

[NOTE]
----
If a field has the Prompt on launch checkbox selected, launching the job prompts you for the value for that field when launching.
Most prompted values override any values set in the job template.
Exceptions are noted in the following table.
----

4. You can set the following options for launching this template, if necessary:
* Privilege escalation: If checked, you enable this playbook to run as an administrator.
This is the equal of passing the --become option to the ansible-playbook command.
* Provisioning callback: If checked, you enable a host to call back to automation controller through the REST API and start a job from this job template.
For more information, see Provisioning Callbacks.
* Enable webhook: If checked, you turn on the ability to interface with a predefined SCM system web service that is used to launch a job template.
GitHub and GitLab are the supported SCM systems.
* If you enable webhooks, other fields display, prompting for additional information:
* Webhook service: Select which service to listen for webhooks from.
* Webhook URL: Automatically populated with the URL for the webhook service to POST requests to.
* Webhook key: Generated shared secret to be used by the webhook service to sign payloads sent to automation controller.
You must configure this in the settings on the webhook service in order for automation controller to accept webhooks from this service.
* Webhook credential: Optionally, give a GitHub or GitLab personal access token (PAT) as a credential to use to send status updates back to the webhook service.

Before you can select it, the credential must exist.

See Credential Types to create one.
* For additional information about setting up webhooks, see Working with Webhooks.
* Concurrent jobs: If checked, you are allowing jobs in the queue to run simultaneously if not dependent on one another. Check this box if you want to run job slices simultaneously. For more information, see Automation controller capacity determination and job impact.
* Enable fact storage: If checked, automation controller stores gathered facts for all hosts in an inventory related to the job running.
* Prevent instance group fallback: Check this option to allow only the instance groups listed in the Instance Groups field to run the job.
If clear, all available instances in the execution pool are used based on the hierarchy described in Control where a job runs.
5. Click btn:[Create job template], when you have completed configuring the details of the job template.

Creating the template does not exit the job template page but advances to the Job Template Details tab.
After saving the template, you can click btn:[Launch template] to start the job.
You can also click btn:[Edit] to add or change the attributes of the template, such as permissions, notifications, view completed jobs, and add a survey (if the job type is not a scan).
You must first save the template before launching, otherwise, btn:[Launch template] remains disabled.

1. From the navigation panel, select menu:Automation Execution[Templates].
2. Verify that the newly created template appears on the Templates page.

# Editing a job template

As part of the initial setup, you can leave the default Demo Job Template as it is, but you can edit it later.

1. Open the template to edit it by using one of these methods:
* Click btn:[Edit] in the job template Details page.
* From the navigation panel, select menu:Automation Execution[Templates]. Click btn:[Edit] next to the template name and edit the appropriate details.
2. Save your changes.
![Job templates]
3. To exit after saving and return to the Templates list view, use the breadcrumb navigation links or click btn:[Cancel].
Clicking btn:[Save] does not exit the Details dialog.

# Running a job template

A benefit of automation controller is the push-button deployment of Ansible Playbooks.
You can configure a template to store all the parameters that you would normally pass to the Ansible Playbook on the command line.
In addition to the playbooks, the template passes the inventory, credentials, extra variables, and all options and settings that you can specify on the command line.

* From the navigation panel, select menu:Automation Execution[Templates] and click btn:[Launch] next to the job template.

![Launch template]

The initial job start generates a status page, which updates automatically by using automation controller&#8217;s Live Event feature, until the job is complete.

For more information about the job results, see Jobs in automation controller in Using automation execution.

To learn more about these automation controller features or to learn about administration tasks and the controller API, see the following documentation sets:

* Using automation execution
* Red Hat Ansible Automation Platform Installation Guide
* Configuring automation execution
* Automation Controller API Guide
* Automation controller Release Notes
* Product Documentation for Red Hat Ansible Automation Platform