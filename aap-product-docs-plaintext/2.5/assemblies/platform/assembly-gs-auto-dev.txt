# Getting started as an automation developer

As an automation developer, you can use Ansible Automation Platform to implement your organization's automation strategy.
Ansible Automation Platform can help you write, test, and share automation content, and download and use Red Hat certified collections.
This guide will walk you through the basic steps to get set up as an automation developer on Ansible Automation Platform.
To get started as an automation developer, learn how to:
* Set up your development environment
* Use playbooks and rulebooks
* Create roles
* Find existing automation content and publish your own custom content
* Use execution environments and decision environments
* Create a project
* Create and run rulebook activations for Event-Driven Ansible

# Create automation content with playbooks

Ansible playbooks are blueprints that tell Ansible Automation Platform what tasks to perform with which devices.
You can use a playbook to define the automation tasks that you want the platform to run.

## Create a playbook

A playbook contains one or more plays.

# Define events with rulebooks

An Ansible rulebook is a collection of rulesets that references one or more sources, rules, and conditions.

Rulebooks are to Event-Driven Ansible what playbooks are to Ansible Automation Platform as a whole.
Like a playbook, a rulebook defines automation tasks for the platform, along with when they should be triggered.

## Rulebook actions

Rulebooks use an "if-this-then-that‚Äù logic that tells Event-Driven Ansible what actions to activate when a rule is triggered.

# Bundle content with Ansible roles

A role is like a customized piece of automation content that bundles together relevant bits from automation playbooks to fit your system&#8217;s specific needs. Roles are self-contained and portable, and can include groupings of tasks, variables, configuration templates, handlers, and other supporting files to orchestrate complicated automation flows.

Instead of creating huge playbooks with hundreds of tasks, you can use roles to break the tasks apart into smaller, more discrete units of work.

To learn more about roles, see What is an Ansible Role-and how is it used?.

## Creating a role

You can create roles using the Ansible Galaxy CLI tool, which is included with your Ansible Automation Platform bundle. Access role-specific commands from the roles subcommand:

# Learn about content collections

Ansible content collections are assemblages of automation content.

You can find Ansible Certified Collections in automation hub.

## Browse content

If you are not using the bundle installer, you can use a Red Hat-supplied Ansible Playbook to install validated content. For further information, see Ansible validated content.

You can update validated collections manually by downloading their updated packages in automation hub.

## Downloading content

After collections are finalized, you can import them to a location where they can be distributed to others across your organization.

1. Log in to Red Hat Ansible Automation Platform.
2. From the navigation panel, select Full Experience.
The automation hub UI is displayed.
3. From the navigation panel, select menu:Automation Content[Collections].
The Collections page displays all collections across all repositories.
You can search for a specific collection.
4. Select the collection that you want to export.
The collection details page opens.
5. From the Install tab, select Download tarball.
The .tar file is downloaded to your default browser downloads folder.
You can now import it to the location of your choosing.

# Publishing to a collection

You can configure your projects to be uploaded to the source control manager of your choice.

## Uploading a collection to automation hub

If you want to share a collection that you have created with the rest of the Ansible community, you can upload it to automation hub.

# Build and use an execution environment

Automation execution environments are consistent and shareable container images that serve as Ansible control nodes.
Automation execution environments reduce the challenge of sharing Ansible content that has external dependencies.
If automation content is like a script that a developer has written, an automation execution environment is like a replica of that developer&#8217;s environment, thereby enabling you to reproduce and scale the automation content that the developer has written.

Automation execution environmentss make it easier for you to implement automation in a range of environments.

## Using the base automation execution environment

Your subscription with Ansible Automation Platform gives you access to some base automation execution environments. You can use a base automation execution environment as a starting point for creating a customized automation execution environment.

(ADD CONTENT)

### Customize the base execution environment image

Ansible Automation Platform includes the following default execution environments:

* Minimal - Includes the latest Ansible-core 2.15 release along with Ansible Runner, but does not include collections or other content
* EE Supported - Minimal, plus all Red Hat-supported collections and dependencies

While these environments cover many automation use cases, you can add additional items to customize these containers for your specific needs. For more information about customizing your execution environment, see Customizing an existing automation execution environment image in the Creating and consuming execution environments guide.

### About Ansible Builder

You also have the option of creating an entirely new execution environment with Ansible Builder.
Ansible Builder is a command line tool you can use to create an eexecution environment for Ansible.
You must create execution environment with Ansible Builder.

To build your own execution environment, you must:

* Download Ansible Builder
* Create a definition file that defines your execution environment
* Create an execution environment image based on the definition file

For more information about building an execution environment, see [ADD 2.5 LINK]: Creating and consuming execution environments.

## Adding an execution environment to a job template

* An execution environment must have been created using ansible-builder as described in [ADD 2.5 LINK]:Build an execution environment.
When an execution environment has been created, you can use it to run jobs.
Use the automation controller UI to specify the execution environment to use in your job templates.
* Depending on whether an execution environment is made available for global use or tied to an organization, you must have the appropriate level of administrator privileges to use an execution environment in a job.
Execution environments tied to an organization require Organization administrators to be able to run jobs with those execution environment.
* Before running a job or job template that uses an execution environment that has a credential assigned to it, ensure that the credential has a username, host, and password.

(ADD CONTENT)

### About container registries

If you have many execution environment that you want to maintain, you can store them in a container registry linked to your private automation hub.

For more information, see [ADD 2.5 LINK]:Populating your private automation hub container registry from the Creating and consuming execution environments guide.

# Build and use a decision environment

Event-Driven Ansible includes an ansible.eda collection, which contains sample sources, event filters and rulebooks.
All the collections, ansible rulebooks and their dependencies use a decision environment, which is an image that can be run on either Podman or Kubernetes.

In decision environments, sources, which are typically Python code, are distributed through ansible-collections.
They inject external events into a rulebook for processing.
The rulebook consists of the following:

* The python interpreter
* Java Runtime Environment for Drools rule engine
* ansible-rulebook python package
* ansible.eda collection

You can use the base decision environment and build your own customized Decision Environments with additional collections and collection dependencies.
You can build a decision environment using a Dockerfile or optionally you can deploy your CA certificate into the image.

## Setting up a new decision environment

The following steps describe how to import a decision environment into your Event-Driven Ansible controller Dashboard.

* You are logged in to the Event-Driven Ansible controller Dashboard as a Content Consumer.
* You have set up a credential, if necessary.
For more information, see the [ADD 2.5 LINK][Setting up credentials] section.
* You have pushed a decision environment image to an image repository or you chose to use the image de-supported provided at registry.redhat.io.

1. Log in to the Ansible Automation Platform Dashboard.
2. Navigate to menu:Automation Decisions[Decision Environments].
3. Click btn:[Create decision environment].
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Image:: This is the full image location, including the container registry, image name, and version tag.
Credential:: This field is optional. This is the token needed to use the decision environment image.
5. Select btn:[Create decision environment].

Your decision environment is now created and can be managed on the Decision Environments page.

After saving the new decision environment, the decision environment&#8217;s details page is displayed.
From there or the Decision Environments list view, you can edit or delete it.

# Creating an automation execution project

A project is a logical collection of playbooks.
Projects are useful as a way to group your automation content according to the organizing principle of your choice.

You can set up an automation execution project in the platform UI.

Procedure
. From the navigation panel, select menu:Automation Execution[Projects].
. On the Projects page, click btn:[Create project] to launch the Create Project window.

+

1. Enter the appropriate details into the following required fields:
* Name (required)
* Optional: Description
* Organization (required): A project must have at least one organization. Select one organization now to create the project. When the project is created you can add additional organizations.
* Optional: Execution Environment: Enter the name of the execution environment or search from a list of existing ones to run this project.
For more information, see Migrating to automation execution environments in the Red Hat Ansible Automation Platform Upgrade and Migration Guide.
* Source Control Type (required): Select an SCM type associated with this project from the menu.
Options in the following sections become available depending on the type chosen.
For more information, see [ADD 2.5 LINK][Managing playbooks manually] or [ADD 2.5 LINK]][Managing playbooks using source control].
* Optional: Content Signature Validation Credential: Use this field to enable content verification.
Specify the GPG key to use for validating content signature during project synchronization.
If the content has been tampered with, the job will not run.
For more information, see [ADD 2.5 LINK][Project signing and verification].
2. Click btn:[Create project].

# Creating an automation decision project

Like automation execution projects, automation decision projects are logical collections of automation decision content.
You can use the project function to organize your automation decision content in a way that makes sense to you.

* You are logged in to the Event-Driven Ansible controller Dashboard as a Content Consumer.
* You have set up a credential, if necessary.
For more information, see the [ADD 2.5 LINK][Setting up credentials] section.
* You have an existing repository containing rulebooks that are integrated with playbooks contained in a repository to be used by automation controller.

1. Log in to the Event-Driven Ansible controller Dashboard.
2. From the navigation panel, select menu:Automation Decisions[Projects].
3. Insert the following:
Name:: Enter project name.
Description:: This field is optional.
SCM type:: Git is the only SCM type available for use.
SCM URL:: HTTP[S] protocol address of a repository, such as GitHub or GitLab.

[NOTE]
----
You cannot edit the SCM URL after you create the project.
----
Credential:: This field is optional. This is the token needed to use the SCM URL.
4. Select btn:[Create project].

Your project is now created and can be managed in the Projects screen.

After saving the new project, the project&#8217;s details page is displayed.
From there or the Projects list view, you can edit or delete it.

# About inventories

An inventory is a file listing the collection of hosts managed by automation controller.
Organizations are assigned to inventories, while permissions to launch playbooks against inventories are controlled at the user or team level.

## Browsing and creating inventories

The Inventories window displays a list of the inventories that are currently available.
You can sort the inventory list by name and searched type, organization, description, owners and modifiers of the inventory, or additional criteria.

1. From the navigational panel, select menu:Automation Execution[Infrastructure > Inventories].
2. Click btn:[Create inventory], and select the type of inventory to create.
3. Enter the appropriate details into the following fields:
* Name: Enter a name appropriate for this inventory.
* Optional: Description: Enter an arbitrary description as appropriate.
* Organization: Required. Choose among the available organizations.
* Only applicable to Smart Inventories: Smart Host Filter: Populate the hosts for this inventory by using a search filter.

Example

name__icontains=RedHat.

These options are based on the organization you chose.

Filters are similar to tags in that tags are used to filter certain hosts that contain those names.
Therefore, to populate the Smart Host Filter field, specify a tag that contains the hosts you want, not the hosts themselves.

Filters are case-sensitive.
* Instance Groups: Select the instance group or groups for this inventory to run on.

You can select many instance groups and sort them in the order that you want them run.
* Optional: Labels: Supply labels that describe this inventory, so they can be used to group and filter inventories and jobs.
* Only applicable to constructed inventories: Input inventories: Specify the source inventories to include in this constructed inventory.
Empty groups from input inventories are copied into the constructed inventory.
* Optional:(Only applicable to constructed inventories): Cached timeout (seconds): Set the length of time you want the cache plugin data to timeout.
* Only applicable to constructed inventories: Verbosity: Control the level of output that Ansible produces as the playbook executes related to inventory sources associated with constructed inventories.

Select the verbosity from:
* Normal
* Verbose
* More verbose
* Debug
* Connection Debug
* WinRM Debug
* Verbose logging includes the output of all commands.
* More verbose provides more detail than Verbose.
* Debug logging is exceedingly verbose and includes information about SSH operations that can be useful in certain support instances. Most users do not need to see debug mode output.
* Connection Debug enables you to run ssh in verbose mode, providing debugging information about the SSH connection progress.
* WinRM Debug used for verbosity specific to windows remote management

Click the  icon for information on How to use the constructed inventory plugin.
* Only applicable to constructed inventories: Limit: Restricts the number of returned hosts for the inventory source associated with the constructed inventory.
You can paste a group name into the limit field to only include hosts in that group.
For more information, see the Source vars setting.
* Only applicable to standard inventories: Options: Check the Prevent Instance Group Fallback option to enable only the instance groups listed in the Instance Groups field to execute the job.
If unchecked, all available instances in the execution pool are used based on the hierarchy.
* Variables (Source vars for constructed inventories):
* Variables Variable definitions and values to apply to all hosts in this inventory.
Enter variables by using either JSON or YAML syntax.
Use the radio button to toggle between the two.
* Source vars for constructed inventories creates groups, specifically under the groups key of the data.
It accepts Jinja2 template syntax, renders it for every host, makes a true or false evaluation, and includes the host in the group (from the key of the entry) if the result is true.
This is particularly useful because you can paste that group name into the limit field to only include hosts in that group.
4. Click btn:[Create inventory].

After saving the new inventory, you can proceed with configuring permissions, groups, hosts, sources, and view completed jobs, if applicable to the type of inventory.

# Work with job templates

A job template is a definition and set of parameters for running an Ansible job.

A job template combines an Ansible playbook from a project and the settings required to launch it, including information about the target host against which the playbook will run, authentication information to access the host, and any other relevant variables . Job templates are useful to run the same job many times. Job templates also encourage the reuse of Ansible playbook content and collaboration between teams. For more information, see Job Templates in the Automation controller User Guide.

## Getting started with job templates

As part of the initial setup, a Demo Job Template is created for you.

1. To review existing templates, select menu:Automation Execution[Templates] from the navigation panel.
2. Click btn:[Demo Job Template] to view its details.

## Creating a job template

1. From the navigation panel, select menu:Automation Execution[Templates].
2. On the Templates page, select Create job template from the Create template list.
3. Enter the appropriate details in the following fields:

[NOTE]
----
If a field has the Prompt on launch checkbox selected, launching the job prompts you for the value for that field when launching.
Most prompted values override any values set in the job template.
Exceptions are noted in the following table.
----

4. You can set the following options for launching this template, if necessary:
* Privilege escalation: If checked, you enable this playbook to run as an administrator.
This is the equal of passing the --become option to the ansible-playbook command.
* Provisioning callback: If checked, you enable a host to call back to automation controller through the REST API and start a job from this job template.
For more information, see [ADD 2.5 LINK][Provisioning Callbacks].
* Enable webhook: If checked, you turn on the ability to interface with a predefined SCM system web service that is used to launch a job template.
GitHub and GitLab are the supported SCM systems.
* If you enable webhooks, other fields display, prompting for additional information:
* Webhook service: Select which service to listen for webhooks from.
* Webhook URL: Automatically populated with the URL for the webhook service to POST requests to.
* Webhook key: Generated shared secret to be used by the webhook service to sign payloads sent to automation controller.
You must configure this in the settings on the webhook service in order for automation controller to accept webhooks from this service.
* Webhook credential: Optionally, give a GitHub or GitLab personal access token (PAT) as a credential to use to send status updates back to the webhook service.

Before you can select it, the credential must exist.

See [ADD 2.5 LINK][Credential Types] to create one.
* For additional information about setting up webhooks, see [ADD 2.5 LINK][Working with Webhooks].
* Concurrent jobs: If checked, you are allowing jobs in the queue to run simultaneously if not dependent on one another. Check this box if you want to run job slices simultaneously. For more information, see [ADD 2.5 LINK][Automation controller capacity determination and job impact].
* Enable fact storage: If checked, automation controller stores gathered facts for all hosts in an inventory related to the job running.
* Prevent instance group fallback: Check this option to allow only the instance groups listed in the Instance Groups field to run the job.
If clear, all available instances in the execution pool are used based on the hierarchy described in Control where a job runs.
5. Click btn:[Create job template], when you have completed configuring the details of the job template.

Creating the template does not exit the job template page but advances to the Job Template Details tab.
After saving the template, you can click btn:[Launch template] to start the job.
You can also click btn:[Edit] to add or change the attributes of the template, such as permissions, notifications, view completed jobs, and add a survey (if the job type is not a scan).
You must first save the template before launching, otherwise, btn:[Launch template] remains disabled.

1. From the navigation panel, select menu:Automation Execution[Templates].
2. Verify that the newly created template appears on the Templates page.

## Running a job template

One benefit of automation controller is the push-button deployment of Ansible playbooks.
You can configure a template to store all the parameters that you would normally pass to the Ansible playbook on the command line.
In addition to the playbooks, the template passes the inventory, credentials, extra variables, and all options and settings that you can specify on the command line.

## Editing a job template

As part of the initial setup, you can leave the default Demo Job Template as it is, but you can edit it later.

1. Open the template to edit it by using one of these methods:
* Click btn:[Edit] in the job template Details page.
* From the navigation panel, select menu:Automation Execution[Templates]. Click btn:[Edit] next to the template name and edit the appropriate details.
2. Save your changes.
![Job templates]
3. To exit after saving and return to the Templates list view, use the breadcrumb navigation links or click btn:[Cancel].
Clicking btn:[Save] does not exit the Details dialog.

# Create and run a rulebook activation

In Event-Driven Ansible, a rulebook activation is a process running in the background defined by a decision environment executing a specific rulebook.

## Setting up a rulebook activation

* You are logged in to the Ansible Automation Platform Dashboard as a Content Consumer.
* You have set up a project.
* You have set up a decision environment.

1. Log in to the Ansible Automation Platform.
2. Navigate to the menu:Automation Decisions[Rulebook Activations].
3. Click btn:[Create rulebook activation].
4. Insert the following:
Name:: Insert the name.
Description:: This field is optional.
Organization:: This field is optional.
Project:: Projects are a logical collection of rulebooks. This field is optional.
Rulebook:: Rulebooks are displayed according to the project selected.
Credential:: Select 0 or more credentials for this rulebook activation. This field is optional.

[NOTE]
----
The credentials that display in this field are customized based on your rulebook activation and only include the following credential types: Vault, Red Hat Ansible Automation Platform, or any custom credential types that you have created. For more information about credentials, see Setting up credentials for Event-Driven Ansible controller.
----
Decision environment:: Decision environments are a container image to run Ansible rulebooks.

[NOTE]
----
In Event-Driven Ansible controller, you cannot customize the pull policy of the decision environment.
By default, it follows the behavior of the always policy.
Every time an activation is started, the system tries to pull the most recent version of the image.
----
Restart policy:: This is the policy that determines how an activation should restart after the container process running the source plugin ends.
* Policies:
1. Always: This restarts the rulebook activation immediately, regardless of whether it ends successfully or not, and occurs no more than 5 times.
2. Never: This never restarts a rulebook activation when the container process ends.
3. On failure: This restarts the rulebook activation after 60 seconds by default, only when the container process fails, and occurs no more than 5 times.
Log level:: This field defines the severity and type of content in your logged events.
* Levels:
1. Error: Logs that contain error messages that are displayed in the History tab of an activation.
2. Info: Logs that contain useful information about rulebook activations, such as a success or failure, triggered action names and their related action events, and errors.
3. Debug: Logs that contain information that is only useful during the debug phase and might be of little value during production.
This log level includes both error and log level data.
Service name:: This defines a service name for Kubernetes to configure inbound connections if the activation exposes a port. This field is optional.
Rulebook activation enabled?:: This automatically enables the rulebook activation to run.
Variables:: The variables for the rulebook are in a JSON or YAML format.
The content would be equivalent to the file passed through the --vars flag of ansible-rulebook command.
Options:: Check the Skip audit events option if you do not want to see your events in the Rule Audit.
5. Click btn:[Create rulebook activation].

Your rulebook activation is now created and can be managed on the Rulebook Activations page.

After saving the new rulebook activation, the rulebook activation&#8217;s details page is displayed, with either a Pending, Running, or Failed status.
From there or the Rulebook Activations list view, you can restart or delete it.


[NOTE]
----
Occasionally, when a source plugin shuts down, it causes a rulebook to exit gracefully after a certain amount of time.
When a rulebook activation shuts down, any tasks that are waiting to be performed will be canceled, and an info level message is sent to the activation log.
For more information, see Rulebooks.
----

### Rulebook activation list view

On the Rulebook Activations page, you can view the rulebook activations that you have created along with the Status, Number of rules with the rulebook, the Fire count, and Restart count.

If the Status is Running, it means that the rulebook activation is running in the background and executing the required actions according to the rules declared in the rulebook.

You can view more details by selecting the activation from the Rulebook Activations list view.

![Rulebook activation][width=25px]

For all activations that have run, you can view the Details and History tabs to get more information about what happened.

## Enabling and disabling rulebook activations

1. Select the switch on the row level to enable or disable your chosen rulebook.
2. In the window, select btn:[Yes, I confirm that I want to enable/disable these X rulebook activations].
3. Select btn:[Enable/Disable rulebook activation].

## Restarting rulebook activations


[NOTE]
----
You can only restart a rulebook activation if it is currently enabled and the restart policy was set to Always when it was created.
----

1. Select the btn:[More Actions] icon &#8942; next to Rulebook Activation enabled/disabled toggle.
2. Select btn:[Restart rulebook activation].
3. In the window, select btn:[Yes, I confirm that I want to restart these X rulebook activations].
4. Select btn:[Restart rulebook activations].

## Deleting rulebook activations

1. Select the btn:[More Actions] icon &#8942; next to the Rulebook Activation enabled/disabled toggle.
2. Select btn:[Delete rulebook activation].
3. In the window, select btn:[Yes, I confirm that I want to delete these X rulebook activations].
4. Select btn:[Delete rulebook activations].

## Activating webhook rulebooks

In Openshift environments, you can allow webhooks to reach an activation-job-pod over a given port by creating a Route that exposes that rulebook activation&#8217;s Kubernetes service.

* You have created a rulebook activation.


[NOTE]
----
The following is an example of rulebook with a given webhook:

```
- name: Listen for storage-monitor events
  hosts: all
  sources:
    - ansible.eda.webhook:
        host: 0.0.0.0
        port: 5000
  rules:
    - name: Rule - Print event information
    condition: event.meta.headers is defined
    action:
      run_job_template:
        name: StorageRemediation
        organization: Default
        job_args:
          extra_vars:
             message: from eda
             sleep: 1
```

----

1. Create a Route (on OpenShift Container Platform) to expose the service.
The following is an example Route for an ansible-rulebook source that expects POST's on port 5000 on the decision environment pod:

```
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: test-sync-bug
  namespace: dynatrace
  labels:
    app: eda
    job-name: activation-job-1-5000
spec:
  host: test-sync-bug-dynatrace.apps.aap-dt.ocp4.testing.ansible.com
  to:
    kind: Service
    name: activation-job-1-5000
    weight: 100
  port:
    targetPort: 5000
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
```

2. When you create the Route, test it with a Post to the Route URL:

```
curl -H "Content-Type: application/json" -X POST
test-sync-bug-dynatrace.apps.aap-dt.ocp4.testing.ansible.com -d
'{}'
```


[NOTE]
----
You do not need the port as it is specified on the Route (targetPort).
----