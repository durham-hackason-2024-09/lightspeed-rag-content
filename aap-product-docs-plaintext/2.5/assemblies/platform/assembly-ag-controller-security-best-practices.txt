# Security best practices

You can deploy automation controller to automate typical environments securely.
However, managing certain operating system environments, automation, and automation platforms, can require additional best practices to ensure security.
To secure Red Hat Enterprise Linux  start with the following release-appropriate security guide:
* For Red Hat Enterprise Linux 8, see Security hardening.
* For Red Hat Enterprise Linux 9, see Security hardening.

# Understand the architecture of Ansible Automation Platform and automation controller

Ansible Automation Platform and automation controller comprise a general-purpose, declarative automation platform.
That means that when an Ansible Playbook is launched (by automation controller, or directly on the command line), the playbook, inventory, and credentials provided to Ansible are considered to be the source of truth.
If you want policies around external verification of specific playbook content, job definition, or inventory contents, you must complete these processes before the automation is launched, either by the automation controller web UI, or the automation controller API.

The use of source control, branching, and mandatory code review is best practice for Ansible automation.
There are tools that can help create process flow around using source control in this manner.

At a higher level, tools exist that enable creation of approvals and policy-based actions around arbitrary workflows, including automation.
These tools can then use Ansible through the automation controller&#8217;s API to perform automation.

You must use a secure default administrator password at the time of automation controller installation.
For more information, see Change the automation controller Administrator Password.

Automation controller exposes services on certain well-known ports, such as port 80 for HTTP traffic and port 443 for HTTPS traffic.
Do not expose automation controller on the open internet, which reduces the threat surface of your installation.

## Granting access

Granting access to certain parts of the system exposes security risks.
Apply the following practices to help secure access:

* Minimize administrative accounts
* Minimize local system access
* Remove access to credentials from users
* Enforce separation of duties

## Minimize administrative accounts

Minimizing the access to system administrative accounts is crucial for maintaining a secure system.
A system administrator or root user can access, edit, and disrupt any system application.
Limit the number of people or accounts with root access, where possible.
Do not give out sudo to root or awx (the automation controller user) to untrusted users.
Note that when restricting administrative access through mechanisms like sudo, restricting to a certain set of commands can still give a wide range of access.
Any command that enables execution of a shell or arbitrary shell commands, or any command that can change files on the system, is equal to full root access.

With automation controller, any automation controller "system administrator" or "superuser" account can edit, change, and update an inventory or automation definition in automation controller.
Restrict this to the minimum set of users possible for low-level automation controller configuration and disaster recovery only.

## Minimize local system access

When you use automation controller with best practices, it does not require local user access except for administrative purposes.
Non-administrator users do not have access to the automation controller system.

## Remove user access to credentials

If an automation controller credential is only stored in the controller, you can further secure it.
You can configure services such as OpenSSH to only permit credentials on connections from specific addresses.
Credentials used by automation can be different from credentials used by system administrators for disaster-recovery or other ad hoc management, allowing for easier auditing.

## Enforce separation of duties

Different pieces of automation might require access to a system at different levels.
For example, you can have low-level system automation that applies patches and performs security baseline checking, while a higher-level piece of automation deploys applications.
By using different keys or credentials for each piece of automation, the effect of any one key vulnerability is minimized, while also enabling baseline auditing.

# Available resources

Several resources exist in automation controller and elsewhere to ensure a secure platform.
Consider using the following functionalities:

* Existing security functionality
* External account stores
* Django password policies

## Existing security functionality

Do not disable SELinux or automation controller&#8217;s existing multi-tenant containment.
Use automation controller&#8217;s role-based access control (RBAC) to delegate the minimum level of privileges required to run automation.
Use teams in automation controller to assign permissions to groups of users rather than to users individually.

For more information, see Role-Based Access Controls in Using automation execution.

## External account stores

Maintaining a full set of users in automation controller can be a time-consuming task in a large organization.
Automation controller supports connecting to external account sources by LDAP, SAML 2.0, and certain OAuth providers.
Using this eliminates a source of error when working with permissions.

## Django password policies

Automation controller administrators can use Django to set password policies at creation time through AUTH_PASSWORD_VALIDATORS to validate automation controller user passwords.
In the custom.py file located at /etc/tower/conf.d of your automation controller instance, add the following code block example:

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

* For more information, see Password validation in Django in addition to the preceding example.
* Ensure that you restart your automation controller instance for the change to take effect.
For more information, see Start, stop, and restart automation controller.